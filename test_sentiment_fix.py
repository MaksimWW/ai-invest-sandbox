#!/usr/bin/env python
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
"""

def test_sentiment_improvements():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    print("üîç –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ò–ô –ê–ù–ê–õ–ò–ó–ê –ù–ê–°–¢–†–û–ï–ù–ò–Ø")
    print("=" * 60)

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    try:
        from nlp.sentiment import classify_ru, classify_en, _rule_based_sentiment_ru
        print("‚úÖ –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π —É—Å–ø–µ—à–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    test_cases = [
        # –Ø–≤–Ω–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ
        ("–ê–∫—Ü–∏–∏ –°–±–µ—Ä–±–∞–Ω–∫–∞ –≤—ã—Ä–æ—Å–ª–∏ –Ω–∞ 10% –ø–æ—Å–ª–µ –æ—Ç–ª–∏—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", "positive"),
        ("–ö–æ–º–ø–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞–ª–∞ —Ä–µ–∫–æ—Ä–¥–Ω—É—é –ø—Ä–∏–±—ã–ª—å –∏ –ø—Ä–µ–≤–∑–æ—à–ª–∞ –æ–∂–∏–¥–∞–Ω–∏—è", "positive"),
        ("Apple stock surged 15% after breakthrough earnings", "positive"),

        # –Ø–≤–Ω–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ  
        ("–ê–∫—Ü–∏–∏ —É–ø–∞–ª–∏ –Ω–∞ 8% –∏–∑-–∑–∞ —É–±—ã—Ç–∫–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏", "negative"),
        ("Tesla shares plummeted after disappointing results", "negative"),
        ("–ö–æ–º–ø–∞–Ω–∏—è –æ–±—ä—è–≤–∏–ª–∞ –æ –∫—Ä–∏–∑–∏—Å–µ –∏ –º–∞—Å—Å–æ–≤—ã—Ö —É–≤–æ–ª—å–Ω–µ–Ω–∏—è—Ö", "negative"),

        # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ
        ("–¶–µ–Ω–∞ –æ—Å—Ç–∞–ª–∞—Å—å —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è", "neutral"),
        ("–¢–æ—Ä–≥–∏ –ø—Ä–æ—à–ª–∏ –±–µ–∑ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π", "neutral"),
        ("Microsoft remained flat with minimal trading volume", "neutral"),
    ]

    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(test_cases)} —Å–ª—É—á–∞–µ–≤:")
    print("-" * 60)

    correct = 0
    total = len(test_cases)

    for i, (text, expected) in enumerate(test_cases, 1):
        print(f"\nüìù –¢–µ—Å—Ç {i}: {text[:50]}...")
        print(f"üéØ –û–∂–∏–¥–∞–µ–º: {expected}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
        if any(russian_char in text for russian_char in "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"):
            result = classify_ru(text)
            # –¢–∞–∫–∂–µ —Ç–µ—Å—Ç–∏—Ä—É–µ–º rule-based
            rule_result = _rule_based_sentiment_ru(text)
            print(f"üîß Rule-based: {rule_result}")
        else:
            result = classify_en(text)

        print(f"‚úÖ –ü–æ–ª—É—á–∏–ª–∏: {result}")

        if result == expected:
            print("‚úÖ –ü–†–û–ô–î–ï–ù")
            correct += 1
        else:
            print("‚ùå –ü–†–û–í–ê–õ–ï–ù")

        print("-" * 40)

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    accuracy = (correct / total) * 100
    print(f"\nüìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {correct}/{total}")
    print(f"üìà –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%")

    if accuracy >= 80:
        print("üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
    elif accuracy >= 60:
        print("üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π")
    else:
        print("‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è")

    return accuracy >= 60

def test_rule_based_weights():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –≤–µ—Å–æ–≤ –≤ rule-based –∞–Ω–∞–ª–∏–∑–µ"""
    print("\nüîß –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –í–ï–°–û–í RULE-BASED")
    print("=" * 50)

    from nlp.sentiment import _rule_based_sentiment_ru

    weight_tests = [
        ("–ê–∫—Ü–∏–∏ –≤—ã—Ä–æ—Å–ª–∏ –Ω–∞ 5%", "positive"),  # —Å–∏–ª—å–Ω–æ–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ —Å–ª–æ–≤–æ
        ("–¶–µ–Ω—ã —É–ø–∞–ª–∏ —Ä–µ–∑–∫–æ", "negative"),     # —Å–∏–ª—å–Ω–æ–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ —Å–ª–æ–≤–æ
        ("–•–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", "positive"),      # –æ–±—ã—á–Ω–æ–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ
        ("–ü–ª–æ—Ö–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", "negative"),      # –æ–±—ã—á–Ω–æ–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ
        ("–û—Å—Ç–∞–ª–∏—Å—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–º–∏", "neutral"),  # –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ
    ]

    for text, expected in weight_tests:
        result = _rule_based_sentiment_ru(text)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"{status} '{text}' ‚Üí {result} (–æ–∂–∏–¥–∞–ª–∏ {expected})")

if __name__ == "__main__":
    success = test_sentiment_improvements()
    test_rule_based_weights()

    if success:
        print("\nüéâ –¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã, —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏")