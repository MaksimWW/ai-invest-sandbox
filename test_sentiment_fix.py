
#!/usr/bin/env python
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Å –æ—Ç–ª–∞–¥–∫–æ–π
"""

def test_sentiment_debug():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π"""
    print("üîç –û–¢–õ–ê–î–û–ß–ù–´–ô –¢–ï–°–¢ –ê–ù–ê–õ–ò–ó–ê –ù–ê–°–¢–†–û–ï–ù–ò–Ø")
    print("=" * 60)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    try:
        from nlp.sentiment import classify_ru, classify_en, classify_multi
        print("‚úÖ –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π —É—Å–ø–µ—à–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã
    test_cases = [
        # –†—É—Å—Å–∫–∏–µ —Ç–µ–∫—Å—Ç—ã - –±–æ–ª–µ–µ —è–≤–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
        ("–°–±–µ—Ä–±–∞–Ω–∫ –ø–æ–∫–∞–∑–∞–ª –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —É–≤–µ–ª–∏—á–∏–ª –ø—Ä–∏–±—ã–ª—å", "ru", "positive"),
        ("–ê–∫—Ü–∏–∏ —É–ø–∞–ª–∏ –∏–∑-–∑–∞ –ø–ª–æ—Ö–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –æ –∫–æ–º–ø–∞–Ω–∏–∏", "ru", "negative"),
        ("–¶–µ–Ω–∞ –∞–∫—Ü–∏–π –æ—Å—Ç–∞–ª–∞—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π", "ru", "neutral"),
        ("–ö—É—Ä—Å –æ—Å—Ç–∞–ª—Å—è —Å—Ç–∞–±–∏–ª—å–Ω—ã–º –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è", "ru", "neutral"),
        ("–ö–æ–º–ø–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ä–∞–º–∫–∞—Ö –æ–∂–∏–¥–∞–Ω–∏–π", "ru", "neutral"),
        ("–†–µ–∫–æ—Ä–¥–Ω—ã–π —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ –Ω–∞ 25%", "ru", "positive"),
        ("–ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏—á–µ—Å–∫–æ–µ –ø–∞–¥–µ–Ω–∏–µ –∞–∫—Ü–∏–π", "ru", "negative"),
        
        # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ç–µ–∫—Å—Ç—ã
        ("Apple stock surged to new highs on strong earnings", "en", "positive"),
        ("Tesla shares plummeted after disappointing results", "en", "negative"),
        ("Microsoft stock remained flat during trading", "en", "neutral"),
    ]
    
    print(f"\nüìä –ü–û–î–†–û–ë–ù–´–ô –ê–ù–ê–õ–ò–ó:")
    print("-" * 60)
    
    correct = 0
    total = len(test_cases)
    
    for i, (text, lang, expected) in enumerate(test_cases, 1):
        print(f"\nüß™ –¢–ï–°–¢ {i}/{total}")
        print(f"üìù –¢–µ–∫—Å—Ç: '{text}'")
        print(f"üåç –Ø–∑—ã–∫: {lang}")
        print(f"üéØ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {expected}")
        print("-" * 40)
        
        try:
            if lang == "ru":
                result = classify_ru(text)
            else:
                result = classify_en(text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            is_correct = result == expected
            status = "‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û" if is_correct else "‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û"
            
            print(f"üèÅ –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            print(f"üìã –°—Ç–∞—Ç—É—Å: {status}")
            
            if is_correct:
                correct += 1
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            continue
        
        print("=" * 40)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    accuracy = (correct / total) * 100
    print(f"\nüìà –ò–¢–û–ì–ò:")
    print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {correct}/{total}")
    print(f"üìä –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%")
    
    if accuracy >= 80:
        print("üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
    elif accuracy >= 60:
        print("‚ö†Ô∏è –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ, –Ω–æ –µ—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π")
    else:
        print("‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è")
    
    return accuracy >= 60

def test_models_loading():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–µ–π"""
    print("üîß –ü–†–û–í–ï–†–ö–ê –ó–ê–ì–†–£–ó–ö–ò –ú–û–î–ï–õ–ï–ô")
    print("=" * 40)
    
    try:
        from nlp.sentiment import _load_models
        ru_tok, ru_mdl, ru_labels, en_tok, en_mdl = _load_models()
        
        print(f"üìä –°–¢–ê–¢–£–° –ú–û–î–ï–õ–ï–ô:")
        print(f"  ‚Ä¢ –†—É—Å—Å–∫–∏–π —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä: {'‚úÖ OK' if ru_tok else '‚ùå –û—à–∏–±–∫–∞'}")
        print(f"  ‚Ä¢ –†—É—Å—Å–∫–∞—è –º–æ–¥–µ–ª—å: {'‚úÖ OK' if ru_mdl else '‚ùå –û—à–∏–±–∫–∞'}")
        print(f"  ‚Ä¢ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä: {'‚úÖ OK' if en_tok else '‚ùå –û—à–∏–±–∫–∞'}")
        print(f"  ‚Ä¢ –ê–Ω–≥–ª–∏–π—Å–∫–∞—è –º–æ–¥–µ–ª—å: {'‚úÖ OK' if en_mdl else '‚ùå –û—à–∏–±–∫–∞'}")
        
        if ru_labels:
            print(f"  ‚Ä¢ –†—É—Å—Å–∫–∏–µ –º–µ—Ç–∫–∏: {ru_labels}")
        
        return all([ru_tok, ru_mdl, en_tok, en_mdl])
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
        return False

def test_news_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏"""
    print("üìã –¢–ï–°–¢ –ü–û–õ–£–ß–ï–ù–ò–Ø –ù–û–í–û–°–¢–ï–ô:")
    print("=" * 40)
    
    try:
        from news_feed import fetch_news
        from nlp.sentiment import latest_news_ru
        
        # –¢–µ—Å—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        print("üì∞ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º NewsAPI –¥–ª—è AAPL...")
        en_news = fetch_news("AAPL", hours=24)
        print(f"‚úÖ NewsAPI: –Ω–∞–π–¥–µ–Ω–æ {len(en_news)} –Ω–æ–≤–æ—Å—Ç–µ–π")
        
        # –¢–µ—Å—Ç —Ä—É—Å—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        print("üì∞ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º RSS –¥–ª—è YNDX...")
        ru_news = latest_news_ru("YNDX", hours=48)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥
        print(f"‚úÖ RSS: –Ω–∞–π–¥–µ–Ω–æ {len(ru_news)} –Ω–æ–≤–æ—Å—Ç–µ–π")
        
        for ticker in ["AAPL"]:
            total_news = len(fetch_news(ticker, hours=24))
            print(f"üìä –ò—Ç–æ–≥–æ –¥–ª—è {ticker}: {total_news} –Ω–æ–≤–æ—Å—Ç–µ–π (NewsAPI: {len(en_news)}, GDELT: 0)")
            print(f"  ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ {total_news} –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è {ticker}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return False

def run_full_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã"""
    print("üî¨ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π
    models_ok = test_models_loading()
    print()
    
    # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    sentiment_ok = test_sentiment_debug()
    print()
    
    # –¢–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π
    news_ok = test_news_integration()
    print()
    
    print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    return models_ok and sentiment_ok and news_ok

if __name__ == "__main__":
    run_full_test()
