# ЗАДАЧА: убедиться, что проблема с GDELT исходит из сети/эндпоинта,
# а не из нашего кода. Нужен минимальный набор диагностических
# скриптов + юнит-тест, НО без изменения боевой логики.

────────────────────────────────────────────────────────────────────────────
I. СОЗДАТЬ ФАЙЛ  tools/gdelt_diag.py
────────────────────────────────────────────────────────────────────────────
Функции:

1. ping_gdelt(timeout=6) -> bool
   • делает HEAD-запрос к https://api.gdeltproject.org/api/v2/doc/docsearch
   • возвращает True, если status 200 ≤ code < 400, иначе False.
   • логирует полное исключение при timeout/SSLError/ConnectError.

2. quick_search(query="AAPL", maxrecords=3, timeout=8) -> list[str]
   • GET-запрос (format=json&mode=ArtList)
   • выкидывает исключение, если статус != 200.
   • возвращает список title’ов (не парсить дату).

3. diag_report():
   • печатает:
        – UTC-время проверки
        – результат ping (OK / FAIL)
        – латентность (ms)
        – пример 3 заголовков по «GAZP»
        – полный URL последнего запроса
   • оборачивает всё в try/except и красочно выводит traceback.

────────────────────────────────────────────────────────────────────────────
II. ДОБАВИТЬ ЮНИТ-ТЕСТ  tests/test_gdelt_diag.py
────────────────────────────────────────────────────────────────────────────
Test cases:

1. test_ping()  –  assert ping_gdelt() is True   (skip, если FAIL)
2. test_quick_search() – вызывает quick_search("GAZP"), убеждается,
   что вернулся list или падает AssertionError с «GDELT unavailable».

► Поставить mark `@pytest.mark.timeout(10)`.

────────────────────────────────────────────────────────────────────────────
III. ОТДЕЛЬНАЯ REPL/MAKE ТАСКА
────────────────────────────────────────────────────────────────────────────
Create script  run_gdelt_diag.sh :

   #!/usr/bin/env bash
   python -m tools.gdelt_diag

Добавить права +x.

────────────────────────────────────────────────────────────────────────────
IV. README-UPDATE
────────────────────────────────────────────────────────────────────────────
• Раздел “🔍 GDELT Connectivity Check”