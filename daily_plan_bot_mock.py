
#!/usr/bin/env python
import os
import requests
import telebot
from datetime import datetime

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# FIGI –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è - mock –¥–∞–Ω–Ω—ã–µ
FIGIS = {
    "BBG004730N88": "YNDX",  # –Ø–Ω–¥–µ–∫—Å
    "BBG00Y91R9T3": "FXIT"   # Fix Price
}

# –û–±—Ä–∞—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ FIGI –ø–æ —Ç–∏–∫–µ—Ä—É
FIGI_MAP = {
    "YNDX": "BBG004730N88",
    "FXIT": "BBG00Y91R9T3",
    "GAZP": "BBG004730RP0",
    "LKOH": "BBG004730ZJ9",
    "SBER": "BBG0047315Y7",   # –°–±–µ—Ä–±–∞–Ω–∫
    "NVDA": "BBG000BBJQV0",   # NVIDIA
    "AMD":  "BBG000BBQCY0",   # Advanced Micro Devices
}

def get_last_prices():
    """MOCK: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ü–µ–Ω—ã –±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ Tinkoff API"""
    print("üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º mock-—Ü–µ–Ω—ã (Tinkoff API –æ—Ç–∫–ª—é—á–µ–Ω)")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ü–µ–Ω—ã
    prices = {
        "YNDX": 2510.35,
        "FXIT": 120.45
    }
    
    return prices

def get_signals():
    """MOCK: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
    print("üìà –ò—Å–ø–æ–ª—å–∑—É–µ–º mock-—Å–∏–≥–Ω–∞–ª—ã (–∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω)")
    
    signals = {
        "YNDX": "BUY",
        "FXIT": "HOLD"
    }
    
    return signals

def format_message(prices, signals):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–Ω–∞–º–∏ –∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏"""
    today = datetime.now().strftime("%Y-%m-%d")
    message = f"üìà –ü–ª–∞–Ω –Ω–∞ {today} (DEMO —Ä–µ–∂–∏–º)\n"

    for ticker in prices.keys():
        price = prices[ticker]
        signal = signals.get(ticker, "HOLD")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º —Ç—ã—Å—è—á
        formatted_price = f"{price:,.2f}".replace(",", " ")
        message += f"‚Ä¢ {ticker}: {formatted_price} ‚ÇΩ\n"
        message += f"  Signal: {signal}\n"

    return message.strip()

def is_telegram_configured():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ Telegram"""
    return (TELEGRAM_TOKEN and TELEGRAM_CHAT_ID and 
            TELEGRAM_TOKEN != "PLACEHOLDER" and 
            TELEGRAM_CHAT_ID != "PLACEHOLDER")

def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    if not is_telegram_configured():
        return False

    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message,
        "parse_mode": "HTML"
    }

    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False

def run_daily_analysis():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç"""
    try:
        print("ü§ñ –ó–∞–ø—É—Å–∫ –≤ DEMO —Ä–µ–∂–∏–º–µ (–±–µ–∑ Tinkoff API)")
        
        # –ü–æ–ª—É—á–∞–µ–º mock-—Ü–µ–Ω—ã
        print("üìä –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ü–µ–Ω—ã...")
        prices = get_last_prices()

        # –ü–æ–ª—É—á–∞–µ–º mock-—Å–∏–≥–Ω–∞–ª—ã
        print("üìà –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã...")
        signals = get_signals()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = format_message(prices, signals)
        message += "\n\n‚ö†Ô∏è DEMO —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
        if is_telegram_configured():
            print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram...")
            if send_telegram_message(message):
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å:")
                print(message)
        else:
            print("üìÑ Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å:")
            print("\n" + message)

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

def run_Telegram_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥"""
    if not TELEGRAM_TOKEN or TELEGRAM_TOKEN == "PLACEHOLDER":
        print("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API
    try:
        bot = telebot.TeleBot(TELEGRAM_TOKEN)
        bot.get_me()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ DEMO —Ä–µ–∂–∏–º–µ...")
    except Exception as e:
        if "409" in str(e):
            print("‚ùå –û—à–∏–±–∫–∞ 409: –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            print("üí° –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            return
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}")
            return

    @bot.message_handler(func=lambda message: True)
    def handle_message(msg):
        text = msg.text.strip() if msg.text else ""

        if text.startswith("/prices"):
            try:
                prices = get_last_prices()
                message = "üí∞ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã (DEMO):\n"
                for ticker, price in prices.items():
                    formatted_price = f"{price:,.2f}".replace(",", " ")
                    message += f"‚Ä¢ {ticker}: {formatted_price} ‚ÇΩ\n"
                message += "\n‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"
                bot.reply_to(msg, message)
            except Exception as e:
                bot.reply_to(msg, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω: {e}")

        elif text.startswith("/signals"):
            try:
                signals = get_signals()
                reply = "üìä –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã (DEMO):\n"
                for ticker, signal in signals.items():
                    reply += f"‚Ä¢ {ticker:<6} ‚Üí {signal}\n"
                reply += "\n‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"
                bot.reply_to(msg, reply)
            except Exception as e:
                bot.reply_to(msg, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

        elif text == "/help":
            help_text = """ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (DEMO —Ä–µ–∂–∏–º):

/prices - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ü–µ–Ω—ã
/signals - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

‚ö†Ô∏è –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ DEMO —Ä–µ–∂–∏–º–µ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API"""
            bot.reply_to(msg, help_text)

        else:
            bot.reply_to(msg, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help")

    bot.infinity_polling()

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ daily_plan_bot –≤ DEMO —Ä–µ–∂–∏–º–µ")
    print("‚ö†Ô∏è Tinkoff API –æ—Ç–∫–ª—é—á–µ–Ω –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
    run_Telegram_bot()
