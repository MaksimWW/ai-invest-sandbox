
#!/usr/bin/env python
import os
import requests
import telebot
from datetime import datetime
import sys

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
TINKOFF_TOKEN = os.getenv("TINKOFF_SANDBOX_TOKEN")

# –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª–∏
sys.path.append('nlp')
sys.path.append('signals')

# FIGI –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
FIGI_MAP = {
    "YNDX": "BBG004730N88",
    "FXIT": "BBG00Y91R9T3",
    "GAZP": "BBG004730RP0",
    "LKOH": "BBG004730ZJ9",
    "SBER": "BBG0047315Y7",
}

def get_tinkoff_prices():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ REST API Tinkoff –±–µ–∑ grpc"""
    if not TINKOFF_TOKEN:
        print("‚ö†Ô∏è TINKOFF_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock-–¥–∞–Ω–Ω—ã–µ")
        return {
            "YNDX": 2510.35,
            "FXIT": 120.45,
            "GAZP": 180.20,
            "SBER": 250.15
        }
    
    print("üìä –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ Tinkoff REST API...")
    prices = {}
    
    # REST API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω
    base_url = "https://invest-public-api.tinkoff.ru/rest"
    headers = {
        "Authorization": f"Bearer {TINKOFF_TOKEN}",
        "Content-Type": "application/json"
    }
    
    for ticker, figi in FIGI_MAP.items():
        try:
            # –ó–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã
            url = f"{base_url}/tinkoff.public.invest.api.contract.v1.MarketDataService/GetLastPrices"
            payload = {
                "figi": [figi]
            }
            
            response = requests.post(url, json=payload, headers=headers, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                last_prices = data.get("lastPrices", [])
                
                if last_prices:
                    price_data = last_prices[0]
                    price = price_data.get("price", {})
                    # –¶–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ units.nano
                    units = price.get("units", 0)
                    nano = price.get("nano", 0)
                    final_price = float(units) + float(nano) / 1_000_000_000
                    
                    prices[ticker] = final_price
                    print(f"   ‚úÖ {ticker}: {final_price:.2f} ‚ÇΩ")
                else:
                    print(f"   ‚ùå {ticker}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                    
        except Exception as e:
            print(f"   ‚ùå {ticker}: –û—à–∏–±–∫–∞ - {e}")
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock
    if not prices:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock-–¥–∞–Ω–Ω—ã–µ")
        prices = {
            "YNDX": 2510.35,
            "FXIT": 120.45,
            "GAZP": 180.20,
            "SBER": 250.15
        }
    
    return prices

def get_sentiment_score(ticker, hours=24):
    """–ü–æ–ª—É—á–∞–µ—Ç sentiment score –¥–ª—è —Ç–∏–∫–µ—Ä–∞"""
    try:
        from sentiment_llm import analyze_sentiment_for_ticker
        return analyze_sentiment_for_ticker(ticker, hours)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ sentiment: {e}")
        return 0  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π sentiment

def get_signals():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω –∏ sentiment"""
    try:
        from composite import generate_composite_signals
        prices = get_tinkoff_prices()
        
        # –ü–æ–ª—É—á–∞–µ–º sentiment –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
        sentiment_scores = {}
        for ticker in prices.keys():
            sentiment_scores[ticker] = get_sentiment_score(ticker, 48)
        
        signals = generate_composite_signals(prices, sentiment_scores)
        return signals
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        # Fallback —Å–∏–≥–Ω–∞–ª—ã
        return {
            "YNDX": "HOLD",
            "FXIT": "BUY",
            "GAZP": "HOLD",
            "SBER": "SELL"
        }

def format_message(prices, signals):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–Ω–∞–º–∏ –∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏"""
    today = datetime.now().strftime("%Y-%m-%d")
    message = f"üìà –ü–ª–∞–Ω –Ω–∞ {today}\n"

    for ticker in prices.keys():
        price = prices[ticker]
        signal = signals.get(ticker, "HOLD")
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
        signal_emoji = {
            "BUY": "üü¢",
            "SELL": "üî¥", 
            "HOLD": "üü°"
        }.get(signal, "‚ö™")

        formatted_price = f"{price:,.2f}".replace(",", " ")
        message += f"‚Ä¢ {ticker}: {formatted_price} ‚ÇΩ {signal_emoji} {signal}\n"

    return message.strip()

def is_telegram_configured():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ Telegram"""
    return (TELEGRAM_TOKEN and TELEGRAM_CHAT_ID and 
            TELEGRAM_TOKEN != "PLACEHOLDER" and 
            TELEGRAM_CHAT_ID != "PLACEHOLDER")

def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    if not is_telegram_configured():
        return False

    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message,
        "parse_mode": "HTML"
    }

    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False

def run_daily_analysis():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç"""
    try:
        print("ü§ñ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        
        print("üìä –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã...")
        prices = get_tinkoff_prices()

        print("üìà –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã...")
        signals = get_signals()

        message = format_message(prices, signals)

        if is_telegram_configured():
            print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram...")
            if send_telegram_message(message):
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å:")
                print(message)
        else:
            print("üìÑ Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å:")
            print("\n" + message)

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

def run_telegram_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥"""
    if not TELEGRAM_TOKEN or TELEGRAM_TOKEN == "PLACEHOLDER":
        print("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        return

    try:
        bot = telebot.TeleBot(TELEGRAM_TOKEN)
        bot.get_me()
        print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    except Exception as e:
        if "409" in str(e):
            print("‚ùå –û—à–∏–±–∫–∞ 409: –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            return
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}")
            return

    @bot.message_handler(func=lambda message: True)
    def handle_message(msg):
        text = msg.text.strip() if msg.text else ""

        if text.startswith("/prices"):
            try:
                prices = get_tinkoff_prices()
                message = "üí∞ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã:\n"
                for ticker, price in prices.items():
                    formatted_price = f"{price:,.2f}".replace(",", " ")
                    message += f"‚Ä¢ {ticker}: {formatted_price} ‚ÇΩ\n"
                bot.reply_to(msg, message)
            except Exception as e:
                bot.reply_to(msg, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω: {e}")

        elif text.startswith("/signals"):
            try:
                signals = get_signals()
                reply = "üìä –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã:\n"
                for ticker, signal in signals.items():
                    signal_emoji = {
                        "BUY": "üü¢",
                        "SELL": "üî¥", 
                        "HOLD": "üü°"
                    }.get(signal, "‚ö™")
                    reply += f"‚Ä¢ {ticker:<6} ‚Üí {signal_emoji} {signal}\n"
                bot.reply_to(msg, reply)
            except Exception as e:
                bot.reply_to(msg, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

        elif text == "/analysis":
            try:
                prices = get_tinkoff_prices()
                signals = get_signals()
                message = format_message(prices, signals)
                bot.reply_to(msg, message)
            except Exception as e:
                bot.reply_to(msg, f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

        elif text == "/help":
            help_text = """ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/prices - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
/signals - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã  
/analysis - –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Ü–µ–Ω–∞–º–∏ –∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"""
            bot.reply_to(msg, help_text)

        else:
            bot.reply_to(msg, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help")

    bot.infinity_polling()

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "analysis":
        run_daily_analysis()
    else:
        print("üöÄ –ó–∞–ø—É—Å–∫ daily_plan_bot (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
        run_telegram_bot()
