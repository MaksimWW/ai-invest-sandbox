
#!/usr/bin/env python
"""
üß™ –¢–ï–°–¢ –ö–û–ú–ê–ù–î–´ /sentiment
==========================
–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ cmd_sentiment –±–µ–∑ Telegram API
"""

import os
import sqlite3
import datetime as dt
from db.storage import insert

def test_sentiment_command():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /sentiment –ª–æ–∫–∞–ª—å–Ω–æ"""
    
    print("üß™ –¢–ï–°–¢ –ö–û–ú–ê–ù–î–´ /sentiment")
    print("=" * 40)
    
    # 1) –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("üìù –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏...")
    
    now = dt.datetime.utcnow()
    test_news = [
        (now - dt.timedelta(hours=1), "SBER", "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞—Å—Ç—ë—Ç –Ω–∞ 5%", 1, "llm"),
        (now - dt.timedelta(hours=2), "SBER", "–°–±–µ—Ä–±–∞–Ω–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–æ—Å—Ç –Ω–∞ 5%", 1, "llm"),
        (now - dt.timedelta(hours=3), "SBER", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–≤—ã—à–∞—é—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –°–±–µ—Ä—É", 1, "llm"), 
        (now - dt.timedelta(hours=4), "SBER", "–ü—Ä–æ–±–ª–µ–º—ã –≤ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —Å–µ–∫—Ç–æ—Ä–µ", -1, "llm"),
        (now - dt.timedelta(hours=5), "SBER", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ –±–∞–Ω–∫–µ", 0, "llm")
    ]
    
    for news_dt, ticker, headline, label, source in test_news:
        insert(news_dt.isoformat(timespec="seconds"), ticker, headline, label, source)
    
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(test_news)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
    
    # 2) –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø—Ä—è–º—É—é
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∫–æ–º–∞–Ω–¥—ã...")
    
    ticker = "SBER"
    hours = 24
    
    try:
        db = sqlite3.connect(os.getenv("NEWS_DB", "db/news_cache.db"))
        query = """
          SELECT dt, headline, label
          FROM   news
          WHERE  ticker = ? AND dt >= datetime('now', ? || ' hours')
          ORDER  BY dt DESC
          LIMIT  5
        """
        rows = db.execute(query, (ticker, -hours)).fetchall()
        db.close()
        
        if not rows:
            print(f"üì≠ –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ {ticker} –∑–∞ {hours} —á –Ω–µ—Ç.")
            return False
        
        def emoji(lbl):
            return {1:"üëç", -1:"üëé", 0:"‚ö™"}.get(lbl, "‚ùì")
        
        print(f"\nüì∞ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã /sentiment {ticker} {hours}:")
        print("-" * 50)
        print(f"üì∞ *{ticker}* ¬∑ {hours}—á\n")
        
        for dt_str, hline, lbl in rows:
            print(f"{emoji(lbl)} {hline[:120]}")
        
        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(rows)} –Ω–æ–≤–æ—Å—Ç–µ–π")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_with_different_params():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    
    print("\nüîÑ –¢–ï–°–¢ –° –†–ê–ó–ù–´–ú–ò –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò")
    print("=" * 40)
    
    test_cases = [
        ("SBER", 12),
        ("SBER", 6), 
        ("NVDA", 24),  # –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏–∫–µ—Ä
    ]
    
    for ticker, hours in test_cases:
        print(f"\nüß™ –¢–µ—Å—Ç: /sentiment {ticker} {hours}")
        
        try:
            db = sqlite3.connect(os.getenv("NEWS_DB", "db/news_cache.db"))
            query = """
              SELECT dt, headline, label
              FROM   news
              WHERE  ticker = ? AND dt >= datetime('now', ? || ' hours')
              ORDER  BY dt DESC
              LIMIT  5
            """
            rows = db.execute(query, (ticker, -hours)).fetchall()
            db.close()
            
            if not rows:
                print(f"üì≠ –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ {ticker} –∑–∞ {hours} —á –Ω–µ—Ç.")
            else:
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(rows)} –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ {ticker}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_cmd_sentiment_function():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∞–º—É —Ñ—É–Ω–∫—Ü–∏—é cmd_sentiment –∏–∑ daily_plan_bot.py"""
    print("\nü§ñ –¢–ï–°–¢ –§–£–ù–ö–¶–ò–ò cmd_sentiment")
    print("=" * 40)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –º–æ–∫–∏ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö Telegram –æ–±—ä–µ–∫—Ç–æ–≤
        class MockMessage:
            def __init__(self):
                self.replies = []
            
            def reply_text(self, text):
                self.replies.append(("text", text))
                print(f"BOT: {text}")
            
            def reply_markdown(self, text, parse_mode=None):
                self.replies.append(("markdown", text))
                print(f"BOT MD:\n{text}")
        
        class MockUpdate:
            def __init__(self):
                self.message = MockMessage()
        
        class MockContext:
            def __init__(self, args):
                self.args = args
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        test_cases = [
            (["SBER"], "–¢–µ—Å—Ç —Å SBER –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —á–∞—Å–æ–≤"),
            (["SBER", "24"], "–¢–µ—Å—Ç —Å SBER –∑–∞ 24 —á–∞—Å–∞"),
            (["NVDA", "12"], "–¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ç–∏–∫–µ—Ä–æ–º"),
            ([], "–¢–µ—Å—Ç –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
        ]
        
        for args, description in test_cases:
            print(f"\nüìã {description}")
            print(f"   –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {args}")
            
            update = MockUpdate()
            context = MockContext(args)
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∫–æ–º–∞–Ω–¥—ã cmd_sentiment –Ω–∞–ø—Ä—è–º—É—é
            if not args:
                update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sentiment TICKER [—á–∞—Å–æ–≤]")
            else:
                ticker = args[0].upper()
                try:
                    hours = int(args[1]) if len(args) > 1 else 48
                except ValueError:
                    update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
                    continue
                
                try:
                    import sqlite3
                    import os
                    
                    db_path = os.getenv("NEWS_DB", "db/news_cache.db")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    if not os.path.exists(db_path):
                        update.message.reply_text(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
                        continue
                    
                    db = sqlite3.connect(db_path)
                    query = """
                      SELECT dt, headline, label
                      FROM   news
                      WHERE  ticker = ? AND dt >= datetime('now', ? || ' hours')
                      ORDER  BY dt DESC
                      LIMIT  5
                    """
                    rows = db.execute(query, (ticker, -hours)).fetchall()
                    db.close()
                    
                    if not rows:
                        update.message.reply_text(f"–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ {ticker} –∑–∞ {hours} —á –Ω–µ—Ç.")
                    else:
                        def emoji(lbl):
                            return {1:"üëç", -1:"üëé", 0:"‚ö™"}.get(lbl, "‚ùì")
                        
                        lines = [f"üì∞ *{ticker}* ¬∑ {hours}—á\n"]
                        for dt_str, hline, lbl in rows:
                            lines.append(f"{emoji(lbl)} {hline[:120]}")
                        
                        update.message.reply_markdown("\n".join(lines))
                
                except sqlite3.Error as e:
                    update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
                except Exception as e:
                    update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã /sentiment")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    test1 = test_sentiment_command()
    test_with_different_params()
    test2 = test_cmd_sentiment_function()
    
    print("\n" + "=" * 50)
    if test1 and test2:
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")
    else:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
    
    print("üìã –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ Telegram:")
    print("   /sentiment SBER")
    print("   /sentiment SBER 12")
