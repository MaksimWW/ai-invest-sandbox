#!/usr/bin/env python3
import socket
import threading
import time
import sys

class SimpleRedis:
    def __init__(self, host='127.0.0.1', port=6379):
        self.host = host
        self.port = port
        self.data = {}
        self.running = True
        
    def start(self):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        sock.bind((self.host, self.port))
        sock.listen(5)
        print(f"üöÄ Simple Redis server listening on {self.host}:{self.port}")
        
        while self.running:
            try:
                client, addr = sock.accept()
                threading.Thread(target=self.handle_client, args=(client,)).start()
            except:
                break
                
    def handle_client(self, client):
        buffer = b""
        while True:
            try:
                data = client.recv(1024)
                if not data:
                    break
                    
                buffer += data
                while b'\r\n' in buffer:
                    line, buffer = buffer.split(b'\r\n', 1)
                    if line:
                        response = self.process_resp_command(buffer, line)
                        if response:
                            client.send(response)
                            buffer = b""  # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
                            break
            except:
                break
        client.close()
        
    def process_resp_command(self, buffer, first_line):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ RESP (Redis Serialization Protocol)"""
        try:
            first_line = first_line.decode('utf-8')
            
            # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–∏–≤–æ–≤ –∫–æ–º–∞–Ω–¥ (*<count>)
            if first_line.startswith('*'):
                count = int(first_line[1:])
                parts = []
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –±—É—Ñ–µ—Ä–∞
                lines = buffer.split(b'\r\n')
                arg_index = 0
                
                for i in range(count):
                    if arg_index < len(lines) and lines[arg_index].startswith(b'$'):
                        length = int(lines[arg_index][1:])
                        if arg_index + 1 < len(lines):
                            arg_value = lines[arg_index + 1].decode('utf-8')
                            parts.append(arg_value)
                            arg_index += 2
                        else:
                            return None
                
                if len(parts) >= count:
                    return self.execute_command(parts)
                    
            return b"-ERR invalid command format\r\n"
            
        except Exception as e:
            return b"-ERR protocol error\r\n"
    
    def execute_command(self, parts):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç Redis –∫–æ–º–∞–Ω–¥—É"""
        if not parts:
            return b"-ERR empty command\r\n"
            
        cmd = parts[0].upper()
        
        if cmd == "PING":
            return b"+PONG\r\n"
        elif cmd == "SET" and len(parts) >= 3:
            key, value = parts[1], parts[2]
            self.data[key] = value
            return b"+OK\r\n"
        elif cmd == "SETEX" and len(parts) >= 4:
            key, ttl, value = parts[1], int(parts[2]), parts[3]
            self.data[key] = value
            # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ TTL (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            return b"+OK\r\n"
        elif cmd == "GET" and len(parts) >= 2:
            key = parts[1]
            value = self.data.get(key)
            if value is None:
                return b"$-1\r\n"
            value_bytes = value.encode('utf-8')
            return f"${len(value_bytes)}\r\n{value}\r\n".encode('utf-8')
        elif cmd == "DEL" and len(parts) >= 2:
            key = parts[1]
            if key in self.data:
                del self.data[key]
                return b":1\r\n"
            return b":0\r\n"
        elif cmd == "FLUSHALL":
            self.data.clear()
            return b"+OK\r\n"
        
        return b"-ERR unknown command\r\n"

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è daemonize
    daemonize = "--daemonize" in sys.argv and "yes" in sys.argv
    
    server = SimpleRedis()
    if daemonize:
        # –ü—Ä–æ—Å—Ç–∞—è —ç–º—É–ª—è—Ü–∏—è daemon —Ä–µ–∂–∏–º–∞
        import os
        if os.fork() == 0:
            server.start()
    else:
        server.start()
