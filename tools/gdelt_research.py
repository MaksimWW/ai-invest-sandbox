
#!/usr/bin/env python
"""
GDELT Research Tool
–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ GDELT API
"""

import requests
import time
from datetime import datetime, timedelta
import json


def check_gdelt_github():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π GDELT –Ω–∞ issue"""
    print("üêô –ü—Ä–æ–≤–µ—Ä–∫–∞ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è GDELT...")
    
    github_repos = [
        "https://api.github.com/repos/linwoodc3/gdeltPyR/issues",
        "https://api.github.com/repos/alex9smith/gdelt-doc-api/issues"
    ]
    
    for repo_url in github_repos:
        try:
            response = requests.get(repo_url, timeout=10)
            if response.status_code == 200:
                issues = response.json()
                recent_issues = [
                    issue for issue in issues[:10] 
                    if "api" in issue.get("title", "").lower() or 
                       "timeout" in issue.get("title", "").lower() or
                       "connection" in issue.get("title", "").lower()
                ]
                
                if recent_issues:
                    print(f"   üìã –ù–∞–π–¥–µ–Ω—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ issue –≤ {repo_url.split('/')[-2]}:")
                    for issue in recent_issues[:3]:
                        print(f"      ‚Ä¢ {issue['title'][:60]}...")
                        print(f"        {issue['html_url']}")
                else:
                    print(f"   ‚úÖ –ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö issue –≤ {repo_url.split('/')[-2]}")
                    
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ {repo_url}: {e}")


def check_gdelt_alternatives():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞ –∫ GDELT"""
    print("üîÑ –ü–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–æ—Å—Ç—É–ø–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º raw data endpoints
    raw_endpoints = [
        "http://data.gdeltproject.org/gdeltv2/",
        "http://data.gdeltproject.org/gdeltv3/",
        "https://blog.gdeltproject.org/",
        "http://data.gdeltproject.org/api-documentation/"
    ]
    
    for endpoint in raw_endpoints:
        try:
            response = requests.get(endpoint, timeout=8)
            if response.status_code == 200:
                print(f"   ‚úÖ {endpoint} - –î–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"   ‚ö†Ô∏è {endpoint} - HTTP {response.status_code}")
        except Exception as e:
            print(f"   ‚ùå {endpoint} - {type(e).__name__}")


def check_working_examples():
    """–ò—â–µ—Ç —Ä–∞–±–æ—á–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è GDELT API"""
    print("üí° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤...")
    
    # –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    working_examples = [
        {
            "name": "–ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É",
            "url": "https://api.gdeltproject.org/api/v2/doc/docsearch",
            "params": {"query": "climate change", "maxrecords": 1, "format": "json"}
        },
        {
            "name": "–ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —è–∑—ã–∫—É",
            "url": "https://api.gdeltproject.org/api/v2/doc/docsearch", 
            "params": {"query": "putin", "format": "json", "maxrecords": 1, "sourcelang": "english"}
        },
        {
            "name": "TV News Archive",
            "url": "https://api.gdeltproject.org/api/v2/tv/tv",
            "params": {"query": "trump", "format": "json", "maxrecords": 1}
        }
    ]
    
    for example in working_examples:
        print(f"   üß™ {example['name']}...")
        
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            methods = [
                {"verify": True, "timeout": 10},
                {"verify": False, "timeout": 15},
            ]
            
            success = False
            for method in methods:
                try:
                    response = requests.get(
                        example["url"],
                        params=example["params"],
                        **method
                    )
                    
                    if response.status_code == 200:
                        print(f"      ‚úÖ –£—Å–ø–µ—Ö! –°—Ç–∞—Ç—É—Å: {response.status_code}")
                        
                        # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å JSON
                        try:
                            data = response.json()
                            if isinstance(data, dict):
                                keys = list(data.keys())[:3]
                                print(f"         üìã –ö–ª—é—á–∏ JSON: {keys}")
                        except:
                            print(f"         üìÑ –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(response.content)} –±–∞–π—Ç")
                        
                        success = True
                        break
                        
                except Exception as e:
                    continue
            
            if not success:
                print(f"      ‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                
        except Exception as e:
            print(f"      ‚ùå –û—à–∏–±–∫–∞: {type(e).__name__}")


def test_gdelt_mirrors():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–µ—Ä–∫–∞–ª–∞ –∏–ª–∏ CDN GDELT"""
    print("ü™û –ü–æ–∏—Å–∫ –∑–µ—Ä–∫–∞–ª –∏ CDN endpoints...")
    
    # –í–æ–∑–º–æ–∂–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    alternative_domains = [
        "api.gdeltproject.org",
        "www.gdeltproject.org", 
        "blog.gdeltproject.org",
        "data.gdeltproject.org"
    ]
    
    for domain in alternative_domains:
        print(f"   üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º {domain}...")
        
        try:
            # –ü—Ä–æ—Å—Ç–æ–π ping
            response = requests.get(f"http://{domain}", timeout=8)
            print(f"      ‚úÖ HTTP –¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            
            # –ü—Ä–æ–±—É–µ–º HTTPS
            try:
                https_response = requests.get(f"https://{domain}", timeout=8)
                print(f"      üîí HTTPS –¥–æ—Å—Ç—É–ø–µ–Ω: {https_response.status_code}")
            except:
                print(f"      ‚ùå HTTPS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
        except Exception as e:
            print(f"      ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {type(e).__name__}")


def suggest_solutions():
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è"""
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –†–ï–®–ï–ù–ò–Æ –ü–†–û–ë–õ–ï–ú:")
    print("-" * 50)
    
    solutions = [
        {
            "problem": "–¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è",
            "solutions": [
                "–£–≤–µ–ª–∏—á–∏—Ç—å timeout –¥–æ 30+ —Å–µ–∫—É–Ω–¥",
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å retry –º–µ—Ö–∞–Ω–∏–∑–º —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π",
                "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ HTTP –≤–º–µ—Å—Ç–æ HTTPS",
                "–û—Ç–∫–ª—é—á–∏—Ç—å SSL –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–Ω–æ"
            ]
        },
        {
            "problem": "SSL/TLS –æ—à–∏–±–∫–∏", 
            "solutions": [
                "–î–æ–±–∞–≤–∏—Ç—å verify=False –≤ requests",
                "–û–±–Ω–æ–≤–∏—Ç—å certifi: pip install --upgrade certifi",
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTP endpoint",
                "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å custom SSL context"
            ]
        },
        {
            "problem": "DNS –ø—Ä–æ–±–ª–µ–º—ã",
            "solutions": [
                "–ò–∑–º–µ–Ω–∏—Ç—å DNS –Ω–∞ 8.8.8.8 –∏–ª–∏ 1.1.1.1",
                "–î–æ–±–∞–≤–∏—Ç—å IP –≤ /etc/hosts",
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä—è–º–æ–π IP –≤–º–µ—Å—Ç–æ –¥–æ–º–µ–Ω–∞",
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å firewall –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
            ]
        },
        {
            "problem": "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP/User-Agent",
            "solutions": [
                "–ò–∑–º–µ–Ω–∏—Ç—å User-Agent –Ω–∞ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π",
                "–î–æ–±–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏",
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–æ—Ç–∞—Ü–∏—é User-Agent",
                "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ VPN/proxy"
            ]
        },
        {
            "problem": "–í—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API",
            "solutions": [
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ blog.gdeltproject.org",
                "–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å fallback –Ω–∞ –∫—ç—à",
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
                "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"
            ]
        }
    ]
    
    for i, item in enumerate(solutions, 1):
        print(f"\n{i}. üö® {item['problem']}")
        for solution in item['solutions']:
            print(f"   ‚Ä¢ {solution}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    print("üî¨ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú GDELT API")
    print("=" * 60)
    
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}")
    print()
    
    # 1. GitHub issues
    check_gdelt_github()
    print()
    
    # 2. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ endpoints  
    check_gdelt_alternatives()
    print()
    
    # 3. –†–∞–±–æ—á–∏–µ –ø—Ä–∏–º–µ—Ä—ã
    check_working_examples()
    print()
    
    # 4. –ó–µ—Ä–∫–∞–ª–∞
    test_gdelt_mirrors()
    print()
    
    # 5. –†–µ—à–µ–Ω–∏—è
    suggest_solutions()
    
    print("\n" + "=" * 60)
    print("üèÅ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
    main()
