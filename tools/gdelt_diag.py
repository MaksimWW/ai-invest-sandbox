
#!/usr/bin/env python
"""
GDELT Diagnostic Tools - Extended Version
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GDELT API
"""

import requests
import time
import urllib3
from datetime import datetime
from typing import List, Optional, Dict, Any
import traceback
import ssl
import socket
from urllib.parse import urlencode
import json

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# –†–∞–∑–ª–∏—á–Ω—ã–µ endpoints GDELT –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
GDELT_ENDPOINTS = {
    "main": "https://api.gdeltproject.org/api/v2/doc/docsearch",
    "alternative": "http://api.gdeltproject.org/api/v2/doc/docsearch",
    "docs": "https://api.gdeltproject.org/api/v2/doc/doc",
    "geo": "https://api.gdeltproject.org/api/v2/geo/geo",
    "tv": "https://api.gdeltproject.org/api/v2/tv/tv",
    "lastupdate": "http://data.gdeltproject.org/gdeltv2/lastupdate.txt"
}

# –†–∞–∑–ª–∏—á–Ω—ã–µ User-Agent –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Safari/605.1.15",
    "Python-requests/2.28.1",
    "GDELT-Client/1.0",
    "Research-Bot/1.0"
]

# DNS —Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
DNS_SERVERS = [
    "8.8.8.8",      # Google
    "1.1.1.1",      # Cloudflare
    "208.67.222.222", # OpenDNS
    "9.9.9.9"       # Quad9
]


def test_dns_resolution():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ DNS –¥–ª—è GDELT"""
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è...")
    
    hostnames = [
        "api.gdeltproject.org",
        "data.gdeltproject.org",
        "gdeltproject.org"
    ]
    
    for hostname in hostnames:
        try:
            ip = socket.gethostbyname(hostname)
            print(f"   ‚úÖ {hostname} -> {ip}")
        except socket.gaierror as e:
            print(f"   ‚ùå {hostname} -> DNS Error: {e}")


def test_basic_connectivity():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤–æ–µ —Å–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
    print("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
    
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–æ—Ä—Ç—É 80 –∏ 443
        for port in [80, 443]:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(5)
            result = sock.connect_ex(("api.gdeltproject.org", port))
            sock.close()
            
            if result == 0:
                print(f"   ‚úÖ –ü–æ—Ä—Ç {port} –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"   ‚ùå –ü–æ—Ä—Ç {port} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")


def test_with_different_sessions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ requests.Session"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å–µ—Å—Å–∏–π...")
    
    configs = [
        {
            "name": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–µ—Å—Å–∏—è",
            "verify": True,
            "timeout": 10,
            "headers": {}
        },
        {
            "name": "–ë–µ–∑ SSL –ø—Ä–æ–≤–µ—Ä–∫–∏",
            "verify": False,
            "timeout": 15,
            "headers": {}
        },
        {
            "name": "–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º User-Agent",
            "verify": True,
            "timeout": 10,
            "headers": {"User-Agent": USER_AGENTS[0]}
        },
        {
            "name": "HTTP/1.1 –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ",
            "verify": True,
            "timeout": 10,
            "headers": {"Connection": "close"}
        }
    ]
    
    for config in configs:
        print(f"   üß™ {config['name']}...")
        
        try:
            session = requests.Session()
            session.verify = config["verify"]
            session.headers.update(config["headers"])
            
            response = session.head(
                GDELT_ENDPOINTS["main"],
                timeout=config["timeout"]
            )
            
            print(f"      ‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
        except requests.exceptions.Timeout:
            print(f"      ‚è∞ –¢–∞–π–º–∞—É—Ç")
        except requests.exceptions.SSLError:
            print(f"      üîí SSL –æ—à–∏–±–∫–∞")
        except requests.exceptions.ConnectionError:
            print(f"      üåê –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        except Exception as e:
            print(f"      ‚ùå –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}")


def test_all_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ endpoints GDELT"""
    print("üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö endpoints GDELT...")
    
    for name, url in GDELT_ENDPOINTS.items():
        print(f"   üîç {name}: {url}")
        
        try:
            response = requests.head(url, timeout=8, verify=False)
            print(f"      ‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                # –ü—Ä–æ–±—É–µ–º GET –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö endpoints
                try:
                    get_response = requests.get(url, timeout=8, verify=False)
                    content_length = len(get_response.content)
                    print(f"      üìÑ –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {content_length} –±–∞–π—Ç")
                except:
                    pass
                    
        except requests.exceptions.Timeout:
            print(f"      ‚è∞ –¢–∞–π–º–∞—É—Ç")
        except requests.exceptions.ConnectionError:
            print(f"      üåê –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        except Exception as e:
            print(f"      ‚ùå {type(e).__name__}: {str(e)[:50]}...")


def test_alternative_formats():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ GDELT"""
    print("üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤...")
    
    base_url = "https://api.gdeltproject.org/api/v2/doc/docsearch"
    
    test_params = [
        {
            "name": "JSON —Ñ–æ—Ä–º–∞—Ç",
            "params": {"query": "AAPL", "format": "json", "maxrecords": 1}
        },
        {
            "name": "CSV —Ñ–æ—Ä–º–∞—Ç", 
            "params": {"query": "AAPL", "format": "csv", "maxrecords": 1}
        },
        {
            "name": "HTML —Ñ–æ—Ä–º–∞—Ç",
            "params": {"query": "AAPL", "format": "html", "maxrecords": 1}
        },
        {
            "name": "–ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
            "params": {}
        }
    ]
    
    for test in test_params:
        print(f"   üß™ {test['name']}...")
        
        try:
            response = requests.get(
                base_url,
                params=test["params"],
                timeout=10,
                verify=False
            )
            
            print(f"      ‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                content_type = response.headers.get("content-type", "unknown")
                print(f"      üìÑ Content-Type: {content_type}")
                
        except requests.exceptions.Timeout:
            print(f"      ‚è∞ –¢–∞–π–º–∞—É—Ç")
        except Exception as e:
            print(f"      ‚ùå {type(e).__name__}")


def test_proxy_methods():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã"""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    
    # –¢–µ—Å—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ HTTP
    print("   üåê HTTP –≤–µ—Ä—Å–∏–∏:")
    
    try:
        # HTTP/1.1
        session = requests.Session()
        adapter = requests.adapters.HTTPAdapter()
        session.mount("https://", adapter)
        session.mount("http://", adapter)
        
        response = session.get(
            "http://api.gdeltproject.org/api/v2/doc/docsearch",
            timeout=10
        )
        print(f"      ‚úÖ HTTP (–±–µ–∑ SSL): {response.status_code}")
        
    except Exception as e:
        print(f"      ‚ùå HTTP: {type(e).__name__}")


def ping_gdelt(timeout: int = 6) -> bool:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è ping —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    print("üì° –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ GDELT API...")
    
    for endpoint_name, url in list(GDELT_ENDPOINTS.items())[:3]:
        print(f"   üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {endpoint_name}: {url}")
        
        try:
            start_time = time.time()
            response = requests.head(url, timeout=timeout, verify=False)
            latency = (time.time() - start_time) * 1000
            
            success = 200 <= response.status_code < 400
            
            if success:
                print(f"      ‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}, –õ–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {latency:.1f}ms")
                return True
            else:
                print(f"      ‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: {response.status_code}, –õ–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {latency:.1f}ms")
                
        except requests.exceptions.Timeout:
            print(f"      ‚è∞ –¢–∞–π–º–∞—É—Ç ({timeout}s)")
        except requests.exceptions.SSLError as e:
            print(f"      üîí SSL –æ—à–∏–±–∫–∞: {str(e)[:50]}...")
        except requests.exceptions.ConnectionError as e:
            print(f"      üåê –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)[:50]}...")
        except Exception as e:
            print(f"      ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}")
    
    return False


def quick_search(query: str = "AAPL", maxrecords: int = 3, timeout: int = 8) -> List[str]:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–∏—Å–∫–∞ —Å fallback endpoints"""
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    search_configs = [
        {
            "url": "https://api.gdeltproject.org/api/v2/doc/docsearch",
            "verify": True,
            "name": "HTTPS —Å SSL"
        },
        {
            "url": "http://api.gdeltproject.org/api/v2/doc/docsearch", 
            "verify": False,
            "name": "HTTP –±–µ–∑ SSL"
        },
        {
            "url": "https://api.gdeltproject.org/api/v2/doc/docsearch",
            "verify": False,
            "name": "HTTPS –±–µ–∑ SSL –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"
        }
    ]
    
    params = {
        "query": query,
        "maxrecords": maxrecords,
        "format": "json",
        "mode": "ArtList"
    }
    
    for config in search_configs:
        print(f"   üîÑ –ü—Ä–æ–±—É–µ–º {config['name']}...")
        
        try:
            response = requests.get(
                config["url"],
                params=params,
                timeout=timeout,
                verify=config["verify"],
                headers={"User-Agent": USER_AGENTS[0]}
            )
            
            if response.status_code == 200:
                data = response.json()
                articles = data.get("artList", [])
                
                titles = []
                for article in articles:
                    title = article.get("title", "")
                    if title:
                        titles.append(title)
                
                print(f"      ‚úÖ –£—Å–ø–µ—Ö! –ù–∞–π–¥–µ–Ω–æ {len(titles)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return titles
            else:
                print(f"      ‚ùå HTTP {response.status_code}")
                
        except requests.exceptions.Timeout:
            print(f"      ‚è∞ –¢–∞–π–º–∞—É—Ç ({timeout}s)")
        except requests.exceptions.ConnectionError:
            print(f"      üåê –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        except requests.exceptions.JSONDecodeError:
            print(f"      üìÑ –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON")
        except Exception as e:
            print(f"      ‚ùå {type(e).__name__}: {str(e)[:30]}...")
    
    raise Exception(f"–í—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GDELT –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")


def check_gdelt_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ GDELT"""
    print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ GDELT...")
    
    status_endpoints = [
        "http://data.gdeltproject.org/gdeltv2/lastupdate.txt",
        "http://data.gdeltproject.org/gdeltv2/masterfilelist.txt",
        "http://data.gdeltproject.org/gdeltv2/masterfilelist-translation.txt"
    ]
    
    for endpoint in status_endpoints:
        try:
            response = requests.get(endpoint, timeout=8)
            if response.status_code == 200:
                content = response.text[:100]
                print(f"   ‚úÖ {endpoint.split('/')[-1]}: –î–æ—Å—Ç—É–ø–µ–Ω")
                print(f"      üìÑ –ü—Ä–µ–≤—å—é: {content.strip()}")
            else:
                print(f"   ‚ùå {endpoint.split('/')[-1]}: HTTP {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå {endpoint.split('/')[-1]}: {type(e).__name__}")


def diag_report():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É GDELT API"""
    print("=" * 80)
    print("üîç –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê GDELT API")
    print("=" * 80)
    
    # UTC –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    utc_time = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")
    print(f"‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {utc_time}")
    print()
    
    try:
        # 1. DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        test_dns_resolution()
        print()
        
        # 2. –ë–∞–∑–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        test_basic_connectivity()
        print()
        
        # 3. –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
        check_gdelt_status()
        print()
        
        # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö endpoints
        test_all_endpoints()
        print()
        
        # 5. –†–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–π
        test_with_different_sessions()
        print()
        
        # 6. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        test_alternative_formats()
        print()
        
        # 7. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        test_proxy_methods()
        print()
        
        # 8. –û—Å–Ω–æ–≤–Ω–æ–π ping —Ç–µ—Å—Ç
        print("üéØ –û–°–ù–û–í–ù–û–ô –¢–ï–°–¢ –î–û–°–¢–£–ü–ù–û–°–¢–ò:")
        ping_result = ping_gdelt(timeout=10)
        print()
        
        # 9. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
        print("üîç –¢–ï–°–¢ –ü–û–ò–°–ö–ê:")
        try:
            titles = quick_search("GAZP", maxrecords=3, timeout=15)
            
            if titles:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(titles)} –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:")
                for i, title in enumerate(titles, 1):
                    print(f"   {i}. {title[:80]}...")
            else:
                print("‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            
    except Exception as e:
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:")
        print(traceback.format_exc())
        
    print("=" * 80)
    print("üèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    print("=" * 80)


if __name__ == "__main__":
    diag_report()
