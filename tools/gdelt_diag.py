
#!/usr/bin/env python
"""
GDELT Diagnostic Tools
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GDELT API
"""

import requests
import time
from datetime import datetime
from typing import List, Optional
import traceback


def ping_gdelt(timeout: int = 6) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GDELT API —á–µ—Ä–µ–∑ HEAD-–∑–∞–ø—Ä–æ—Å
    
    Returns:
        bool: True –µ—Å–ª–∏ API –¥–æ—Å—Ç—É–ø–µ–Ω (status 200-399), False –∏–Ω–∞—á–µ
    """
    url = "https://api.gdeltproject.org/api/v2/doc/docsearch"
    
    try:
        response = requests.head(url, timeout=timeout)
        success = 200 <= response.status_code < 400
        
        if success:
            print(f"‚úÖ GDELT ping: {response.status_code}")
        else:
            print(f"‚ö†Ô∏è GDELT ping: {response.status_code}")
            
        return success
        
    except requests.exceptions.Timeout:
        print(f"‚è∞ GDELT ping: Timeout ({timeout}s)")
        return False
    except requests.exceptions.SSLError as e:
        print(f"üîí GDELT ping: SSL Error - {e}")
        return False
    except requests.exceptions.ConnectionError as e:
        print(f"üåê GDELT ping: Connection Error - {e}")
        return False
    except Exception as e:
        print(f"‚ùå GDELT ping: Unexpected error - {type(e).__name__}: {e}")
        return False


def quick_search(query: str = "AAPL", maxrecords: int = 3, timeout: int = 8) -> List[str]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –≤ GDELT API
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (—Ç–∏–∫–µ—Ä)
        maxrecords: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        timeout: –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π
        
    Raises:
        Exception: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö API –∏–ª–∏ —Å–µ—Ç–∏
    """
    url = "https://api.gdeltproject.org/api/v2/doc/docsearch"
    params = {
        "query": query,
        "maxrecords": maxrecords,
        "format": "json",
        "mode": "ArtList"
    }
    
    try:
        response = requests.get(url, params=params, timeout=timeout)
        
        if response.status_code != 200:
            raise Exception(f"HTTP {response.status_code}: {response.reason}")
            
        data = response.json()
        articles = data.get("artList", [])
        
        titles = []
        for article in articles:
            title = article.get("title", "")
            if title:
                titles.append(title)
                
        return titles
        
    except requests.exceptions.Timeout:
        raise Exception(f"Request timeout after {timeout}s")
    except requests.exceptions.ConnectionError as e:
        raise Exception(f"Connection error: {e}")
    except requests.exceptions.JSONDecodeError:
        raise Exception("Invalid JSON response from GDELT API")
    except Exception as e:
        raise Exception(f"GDELT API error: {e}")


def diag_report():
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É GDELT API –∏ –≤—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç
    """
    print("=" * 60)
    print("üîç GDELT API DIAGNOSTIC REPORT")
    print("=" * 60)
    
    # UTC –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    utc_time = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")
    print(f"‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {utc_time}")
    print()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ ping
        print("üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API...")
        start_time = time.time()
        ping_result = ping_gdelt(timeout=6)
        latency = (time.time() - start_time) * 1000
        
        if ping_result:
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å: OK")
            print(f"‚ö° –õ–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {latency:.1f} ms")
        else:
            print(f"‚ùå –°—Ç–∞—Ç—É—Å: FAIL")
            print(f"‚ö° –õ–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {latency:.1f} ms")
            
        print()
        
        # –ü—Ä–∏–º–µ—Ä –ø–æ–∏—Å–∫–∞
        print("üîç –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ 'GAZP'...")
        try:
            titles = quick_search("GAZP", maxrecords=3, timeout=8)
            
            if titles:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(titles)} –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:")
                for i, title in enumerate(titles, 1):
                    print(f"   {i}. {title[:80]}...")
            else:
                print("‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
                
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π URL –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            base_url = "https://api.gdeltproject.org/api/v2/doc/docsearch"
            full_url = f"{base_url}?query=GAZP&maxrecords=3&format=json&mode=ArtList"
            print(f"\nüîó –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å: {full_url}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            
    except Exception as e:
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:")
        print(traceback.format_exc())
        
    print("=" * 60)


if __name__ == "__main__":
    diag_report()
