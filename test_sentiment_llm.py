
#!/usr/bin/env python
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ LLM-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
"""
import os
import sys
sys.path.append('.')

def test_fallback_classifier():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç fallback –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä"""
    print("üß™ –¢–ï–°–¢: Fallback –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä")
    
    from nlp.sentiment_llm import fallback_classify
    
    test_cases = [
        ("–ê–∫—Ü–∏–∏ –≤—ã—Ä–æ—Å–ª–∏ –Ω–∞ 5%", "positive"),
        ("–ö–æ–º–ø–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞–ª–∞ —Ä–æ—Å—Ç –ø—Ä–∏–±—ã–ª–∏", "positive"),
        ("Stocks declined sharply", "negative"),
        ("Revenue dropped by 10%", "negative"),
        ("Company reported quarterly results", "neutral")
    ]
    
    correct = 0
    for text, expected in test_cases:
        result = fallback_classify(text)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"  {status} '{text[:30]}...' ‚Üí {result} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected})")
        if result == expected:
            correct += 1
    
    print(f"üìä –¢–æ—á–Ω–æ—Å—Ç—å fallback: {correct}/{len(test_cases)} ({correct/len(test_cases)*100:.1f}%)")
    return correct == len(test_cases)

def test_cache_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    print("\nüß™ –¢–ï–°–¢: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    from nlp.sentiment_llm import smart_classify, get_cache_stats, cache_get, get_text_hash
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_text = "Test news about company growth"
    
    print("  üîÑ –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ (–¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –≤ LLM/fallback)...")
    result1 = smart_classify(test_text, "TEST")
    
    print("  üîÑ –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ (–¥–æ–ª–∂–µ–Ω –±—Ä–∞—Ç—å –∏–∑ –∫—ç—à–∞)...")
    result2 = smart_classify(test_text, "TEST")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
    cache_works = result1 == result2
    print(f"  {'‚úÖ' if cache_works else '‚ùå'} –ö—ç—à: {result1} == {result2}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ –∫—ç—à–µ
    text_hash = get_text_hash(test_text.strip())
    cached = cache_get(text_hash)
    has_cached = cached is not None
    print(f"  {'‚úÖ' if has_cached else '‚ùå'} –ó–∞–ø–∏—Å—å –≤ –∫—ç—à–µ: {has_cached}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
    stats = get_cache_stats()
    print(f"  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞: {stats}")
    
    return cache_works and has_cached

def test_sentiment_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
    print("\nüß™ –¢–ï–°–¢: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π")
    
    try:
        from daily_plan_bot import get_sentiment_score
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ score –¥–ª—è —Ç–∏–∫–µ—Ä–∞
        print("  üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º get_sentiment_score –¥–ª—è YNDX...")
        score = get_sentiment_score("YNDX", hours=48)
        
        print(f"  üìä Score –¥–ª—è YNDX: {score}")
        print(f"  {'‚úÖ' if isinstance(score, int) else '‚ùå'} –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç int: {type(score)}")
        
        return isinstance(score, int)
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_openai_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é OpenAI"""
    print("\nüß™ –¢–ï–°–¢: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenAI")
    
    api_key = os.getenv("OPENAI_API_KEY")
    llm_off = os.getenv("LLM_OFF", "0")
    
    print(f"  üîë OPENAI_API_KEY: {'‚úÖ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' if api_key else '‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    print(f"  üîå LLM_OFF: {llm_off}")
    
    if not api_key:
        print("  üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENAI_API_KEY")
        print("  üí° –ü–æ–∫–∞ —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ fallback")
    
    return True

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï LLM SENTIMENT ANALYZER")
    print("=" * 50)
    
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenAI", test_openai_config),
        ("Fallback –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä", test_fallback_classifier),
        ("–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ", test_cache_functionality),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", test_sentiment_integration)
    ]
    
    passed = 0
    total = len(tests)
    
    for name, test_func in tests:
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {name}: PASSED")
            else:
                print(f"‚ùå {name}: FAILED")
        except Exception as e:
            print(f"üí• {name}: ERROR - {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! LLM-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")

if __name__ == "__main__":
    main()
