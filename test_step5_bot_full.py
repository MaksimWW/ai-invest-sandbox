
#!/usr/bin/env python
"""
üîç –®–ê–ì–ò 5: –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –±–æ—Ç–∞
==================================================
–ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö —Ä–∞–±–æ—Ç—É
"""

import os
import sys
import subprocess
import time
from dotenv import load_dotenv

def test_step5_bot_full():
    """–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞"""
    
    print("üîç –®–ê–ì–ò 5: –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –±–æ—Ç–∞")
    print("=" * 60)
    
    load_dotenv()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not check_configuration():
        return False
    
    print("\nüìã –¢–ï–°–¢–ò–†–£–ï–ú–´–ï –§–£–ù–ö–¶–ò–ò:")
    print("-" * 40)
    functions = [
        "1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω —á–µ—Ä–µ–∑ Tinkoff API",
        "2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ SMA",
        "3. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets",
        "4. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π",
        "5. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º (–±–µ–∑ Telegram)"
    ]
    
    for func in functions:
        print(f"  {func}")
    
    print(f"\nüîÑ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í:")
    print("-" * 30)
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω
    if not test_tinkoff_prices():
        return False
    
    # –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
    if not test_trading_signals():
        return False
    
    # –¢–µ—Å—Ç 3: Google Sheets
    if not test_sheets_integration():
        return False
    
    # –¢–µ—Å—Ç 4: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    if not test_message_formatting():
        return False
    
    # –¢–µ—Å—Ç 5: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
    if not test_automatic_mode():
        return False
    
    print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    print("-" * 40)
    
    show_next_steps()
    
    return True

def check_configuration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    
    print("üìã 1. –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    print("-" * 40)
    
    required_vars = [
        "TINKOFF_SANDBOX_TOKEN",
        "TELEGRAM_TOKEN", 
        "TELEGRAM_CHAT_ID",
        "SHEETS_WEBHOOK_URL",
        "SHEETS_TOKEN"
    ]
    
    missing_vars = []
    
    for var in required_vars:
        value = os.getenv(var)
        if not value or value == "PLACEHOLDER":
            missing_vars.append(var)
            print(f"‚ùå {var}: –ù–ï –ù–ê–°–¢–†–û–ï–ù")
        else:
            masked = value[:5] + "..." if len(value) > 5 else "***"
            print(f"‚úÖ {var}: {masked}")
    
    if missing_vars:
        print(f"\n‚ö†Ô∏è  –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        print("üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏—Ö –≤ .env —Ñ–∞–π–ª–µ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º")
        return False
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ –ø–æ—Ä—è–¥–∫–µ!")
    return True

def test_tinkoff_prices():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω —á–µ—Ä–µ–∑ Tinkoff API"""
    
    print(f"\nüìã 2. –¢–ï–°–¢ TINKOFF API")
    print("-" * 40)
    
    try:
        print("üì§ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏...")
        sys.path.append('.')
        from daily_plan_bot import get_last_prices
        
        print("üìä –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –∞–∫—Ü–∏–π...")
        prices = get_last_prices()
        
        if not prices:
            print("‚ùå –¶–µ–Ω—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã!")
            return False
        
        print("‚úÖ –¶–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ:")
        for ticker, price in prices.items():
            print(f"   ‚Ä¢ {ticker}: {price:,.2f} ‚ÇΩ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω: {e}")
        return False

def test_trading_signals():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    print(f"\nüìã 3. –¢–ï–°–¢ –¢–û–†–ì–û–í–´–• –°–ò–ì–ù–ê–õ–û–í")
    print("-" * 40)
    
    try:
        print("üìà –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏...")
        from daily_plan_bot import get_signals
        
        print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã...")
        signals = get_signals()
        
        if not signals:
            print("‚ùå –°–∏–≥–Ω–∞–ª—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã!")
            return False
        
        print("‚úÖ –°–∏–≥–Ω–∞–ª—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:")
        for ticker, signal in signals.items():
            emoji = "üü¢" if signal == "BUY" else "üî¥" if signal == "SELL" else "üü°"
            print(f"   ‚Ä¢ {ticker}: {signal} {emoji}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        return False

def test_sheets_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Google Sheets"""
    
    print(f"\nüìã 4. –¢–ï–°–¢ GOOGLE SHEETS")
    print("-" * 40)
    
    try:
        print("üìù –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä...")
        from utils.sheets_logger import log_trade
        from datetime import datetime
        
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å...")
        result = log_trade(
            date=datetime.now().date(),
            ticker="TEST_STEP5",
            figi="TEST_FIGI_STEP5",
            side="BUY",
            price=999.99,
            qty=1,
            fees=0.1
        )
        
        print(f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–∞: {result[:100]}...")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Sheets: {e}")
        return False

def test_message_formatting():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    print(f"\nüìã 5. –¢–ï–°–¢ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("-" * 40)
    
    try:
        print("üìù –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏...")
        from daily_plan_bot import format_message
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_prices = {"YNDX": 2510.35, "FXIT": 120.45}
        test_signals = {"YNDX": "BUY", "FXIT": "HOLD"}
        
        print("üîß –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        message = format_message(test_prices, test_signals)
        
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ:")
        print("=" * 30)
        print(message)
        print("=" * 30)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def test_automatic_mode():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º"""
    
    print(f"\nüìã 6. –¢–ï–°–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –†–ï–ñ–ò–ú–ê")
    print("-" * 40)
    
    try:
        print("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑...")
        from daily_plan_bot import run_daily_analysis
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        run_daily_analysis()
        
        print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")
        return False

def show_next_steps():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏"""
    
    print(f"\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("=" * 40)
    
    print("1Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TELEGRAM –ö–û–ú–ê–ù–î:")
    print("   python daily_plan_bot.py bot")
    print("   –ó–∞—Ç–µ–º –≤ Telegram –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:")
    print("   ‚Ä¢ /start")
    print("   ‚Ä¢ /prices") 
    print("   ‚Ä¢ /signals")
    print("   ‚Ä¢ /test_sheets")
    
    print("\n2Ô∏è‚É£ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö:")
    print("   python daily_plan_bot.py")
    print("   (–∞–Ω–∞–ª–∏–∑ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞)")
    
    print("\n3Ô∏è‚É£ –ù–ê–°–¢–†–û–ô–ö–ê –ê–í–¢–û–ó–ê–ü–£–°–ö–ê:")
    print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ cron –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞")
    print("   ‚Ä¢ –ò–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤ Replit")
    
    print(f"\nüìö –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø:")
    print("   ‚Ä¢ README.md - –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
    print("   ‚Ä¢ Google Sheets - –∂—É—Ä–Ω–∞–ª —Å–¥–µ–ª–æ–∫")
    print("   ‚Ä¢ Telegram –±–æ—Ç - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")

if __name__ == "__main__":
    success = test_step5_bot_full()
    
    if success:
        print(f"\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print(f"\n‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´!")
        print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞.")
