#!/usr/bin/env python
import os
import datetime as dt
import requests

WEBHOOK = os.getenv("SHEETS_WEBHOOK_URL")
TOKEN = os.getenv("SHEETS_TOKEN")

def log_trade(date: dt.date, ticker: str, figi: str,
              side: str, price: float, qty: int, fees: float = 0):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ Google Sheets

    Args:
        date: –î–∞—Ç–∞ —Å–¥–µ–ª–∫–∏
        ticker: –¢–∏–∫–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, YNDX, FXIT)
        figi: FIGI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        side: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ ('BUY' –∏–ª–∏ 'SELL')
        price: –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
        qty: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        fees: –ö–æ–º–∏—Å—Å–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)

    Returns:
        str: –û—Ç–≤–µ—Ç –æ—Ç Google Sheets —Å–∫—Ä–∏–ø—Ç–∞

    Raises:
        RuntimeError: –ï—Å–ª–∏ webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        requests.HTTPError: –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π
    """
    print(f"[DEBUG] log_trade –≤—ã–∑–≤–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {ticker}, {side}, {price}, {qty}")

    if not WEBHOOK or not TOKEN:
        print("[DEBUG] –û—à–∏–±–∫–∞: WEBHOOK –∏–ª–∏ TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        raise RuntimeError("‚ùå Sheets webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SHEETS_WEBHOOK_URL –∏ SHEETS_TOKEN")

    payload = {
        "date": date.isoformat(),
        "ticker": ticker,
        "figi": figi,
        "side": side.upper(),
        "price": price,
        "qty": qty,
        "fees": fees,
        "token": TOKEN
    }

    print("[DEBUG] send to sheets:", payload)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    import json
    with open("debug_sheets.log", "a", encoding="utf-8") as f:
        f.write(f"[{dt.datetime.now()}] Payload: {json.dumps(payload, ensure_ascii=False)}\n")

    try:
        print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –Ω–∞ {WEBHOOK}")
        r = requests.post(WEBHOOK, data=payload, timeout=10)
        print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å –∫–æ–¥–æ–º: {r.status_code}")

        r.raise_for_status()

        response_text = r.text
        print(f"[DEBUG] –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response_text[:500]}...")

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        with open("debug_sheets.log", "a", encoding="utf-8") as f:
            f.write(f"[{dt.datetime.now()}] HTTP Status: {r.status_code}\n")
            f.write(f"[{dt.datetime.now()}] Response Headers: {dict(r.headers)}\n")
            f.write(f"[{dt.datetime.now()}] Response Body: {response_text}\n")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç HTML (–æ—à–∏–±–∫–∞ –æ—Ç Google)
        if response_text.strip().startswith('<!DOCTYPE html>') or '<html>' in response_text:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –∏–∑ HTML
            if 'TypeError:' in response_text or 'Error:' in response_text:
                # –ò—â–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—à–∏–±–æ–∫
                error_patterns = ['TypeError:', 'ReferenceError:', 'Error:', 'Exception:']
                error_msg = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                
                for pattern in error_patterns:
                    error_start = response_text.find(pattern)
                    if error_start != -1:
                        # –ò—â–µ–º –∫–æ–Ω–µ—Ü –æ—à–∏–±–∫–∏
                        possible_ends = ['</div>', '</span>', '</p>', '\n', '(line']
                        error_end = len(response_text)
                        
                        for end_pattern in possible_ends:
                            end_pos = response_text.find(end_pattern, error_start)
                            if end_pos != -1 and end_pos < error_end:
                                error_end = end_pos
                        
                        error_msg = response_text[error_start:error_end].strip()
                        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML entities
                        error_msg = error_msg.replace('&#39;', "'").replace('&quot;', '"').replace('&amp;', '&')
                        break

                # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
                if 'appendRow' in error_msg:
                    detailed_msg = f"""
üîß –ü—Ä–æ–±–ª–µ–º–∞ —Å Google Apps Script: {error_msg}

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID —Ç–∞–±–ª–∏—Ü—ã Google Sheets –≤ —Å–∫—Ä–∏–ø—Ç–µ
2. –õ–∏—Å—Ç —Å –∏–º–µ–Ω–µ–º 'Sheet1' –∏–ª–∏ '–õ–∏—Å—Ç1' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
3. –£ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ
4. –¢–∞–±–ª–∏—Ü–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:
‚Ä¢ ID —Ç–∞–±–ª–∏—Ü—ã –≤ –∫–æ–¥–µ Google Apps Script
‚Ä¢ –ò–º—è –ª–∏—Å—Ç–∞ (–¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º)
‚Ä¢ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —Å–∫—Ä–∏–ø—Ç–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ
                    """
                    raise RuntimeError(detailed_msg.strip())
                else:
                    raise RuntimeError(f"‚ùå –û—à–∏–±–∫–∞ –≤ Google Apps Script: {error_msg}")

            raise RuntimeError("‚ùå Google Apps Script –≤–µ—Ä–Ω—É–ª HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ—à–∏–±–∫–æ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞.")

        return response_text

    except requests.exceptions.RequestException as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        with open("debug_sheets.log", "a", encoding="utf-8") as f:
            f.write(f"[{dt.datetime.now()}] Network Error: {str(e)}\n")
        raise RuntimeError(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets: {e}")