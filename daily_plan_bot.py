#!/usr/bin/env python
import os
import requests
import telebot
from datetime import datetime
from tinkoff.invest import Client
from signals.sma_breakout import generate_signal
from utils.sheets_logger import log_trade

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TINKOFF_SANDBOX_TOKEN = os.getenv("TINKOFF_SANDBOX_TOKEN")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# FIGI –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
FIGIS = {
    "BBG004730N88": "YNDX",  # –Ø–Ω–¥–µ–∫—Å
    "BBG00Y91R9T3": "FXIT"   # Fix Price
}

# –û–±—Ä–∞—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ FIGI –ø–æ —Ç–∏–∫–µ—Ä—É
FIGI_MAP = {
    "YNDX": "BBG004730N88",
    "FXIT": "BBG00Y91R9T3",
    "GAZP": "BBG004730RP0",
    "LKOH": "BBG004730ZJ9",
    "SBER": "BBG0047315Y7",   # –°–±–µ—Ä–±–∞–Ω–∫
    "NVDA": "BBG000BBJQV0",   # NVIDIA
    "AMD":  "BBG000BBQCY0",   # Advanced Micro Devices
}

def get_last_prices():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ Tinkoff Sandbox API"""
    if not TINKOFF_SANDBOX_TOKEN:
        raise RuntimeError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TINKOFF_SANDBOX_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

    prices = {}

    with Client(TINKOFF_SANDBOX_TOKEN, app_name="daily-plan-bot") as client:
        for figi, ticker in FIGIS.items():
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É —á–µ—Ä–µ–∑ MarketData API
                response = client.market_data.get_last_prices(figi=[figi])
                if response.last_prices:
                    price = response.last_prices[0].price
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ä—É–±–ª–∏
                    price_rub = price.units + price.nano / 1_000_000_000
                    prices[ticker] = price_rub
                else:
                    prices[ticker] = 0.0
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {ticker}: {e}")
                prices[ticker] = 0.0

    return prices

def get_signals():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –≤—Å–µ—Ö FIGI"""
    signals = {}

    for figi, ticker in FIGIS.items():
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: SMA20/50, ATR —Ñ–∏–ª—å—Ç—Ä 1.0
            signal = generate_signal(figi, 'hour', fast=20, slow=50, atr_ratio=1.0)
            signals[ticker] = signal
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {ticker}: {e}")
            signals[ticker] = "HOLD"

    return signals

def format_message(prices, signals):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–Ω–∞–º–∏ –∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏"""
    today = datetime.now().strftime("%Y-%m-%d")
    message = f"üìà –ü–ª–∞–Ω –Ω–∞ {today}\n"

    for ticker in prices.keys():
        price = prices[ticker]
        signal = signals.get(ticker, "HOLD")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º —Ç—ã—Å—è—á
        formatted_price = f"{price:,.2f}".replace(",", " ")
        message += f"‚Ä¢ {ticker}: {formatted_price} ‚ÇΩ\n"
        message += f"  Signal: {signal}\n"

    return message.strip()

def is_telegram_configured():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ Telegram"""
    return (TELEGRAM_TOKEN and TELEGRAM_CHAT_ID and 
            TELEGRAM_TOKEN != "PLACEHOLDER" and 
            TELEGRAM_CHAT_ID != "PLACEHOLDER")

def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    if not is_telegram_configured():
        return False

    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message,
        "parse_mode": "HTML"
    }

    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False

def get_sentiment_score(ticker: str, hours: int = 24, force_refresh: bool = False) -> int:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–∏–∫–µ—Ä—É —á–µ—Ä–µ–∑ LLM —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    from nlp.sentiment_llm import get_sentiment_score_from_cache, smart_classify
    # from nlp.sentiment import latest_news_ru # remove
    from news_feed import fetch_news
    from nlp.news_rss_async import async_fetch_all
    import asyncio

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
    cached_score = get_sentiment_score_from_cache(ticker, hours, force_refresh)
    if cached_score != 0 and not force_refresh:  # –ï—Å–ª–∏ –≤ –∫—ç—à–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        print(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {ticker}: {cached_score}")
        return cached_score

    # –ï—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç, —Å–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è {ticker}...")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–∏–∫–µ—Ä–∞
    russian_tickers = {"YNDX", "FXIT", "GAZP", "LKOH", "SBER", "NVTK"}
    american_tickers = {"NVDA", "AMD", "AAPL", "TSLA", "GOOGL", "MSFT", "META"}

    all_texts = []

    # –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è: –¥–ª—è –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤ –ø—Ä–æ–±—É–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    if ticker in russian_tickers:
        print(f"üá∑üá∫ –°–æ–±–∏—Ä–∞–µ–º —Ä—É—Å—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ {ticker}...")
        from nlp.sentiment import fetch_ru_news
        ru_texts = fetch_ru_news(hours=hours)
        all_texts.extend(ru_texts)

        # –î–ª—è —Ä—É—Å—Å–∫–∏—Ö —Ç–∏–∫–µ—Ä–æ–≤ —Ç–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏)
        print(f"üåç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ–º –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ {ticker}...")
        en_texts = fetch_news(ticker, hours=hours)
        all_texts.extend(en_texts)

    elif ticker in american_tickers:
        print(f"üá∫üá∏ –°–æ–±–∏—Ä–∞–µ–º –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ {ticker}...")
        en_texts = fetch_news(ticker, hours=hours)
        all_texts.extend(en_texts)

        # –î–ª—è –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏—Ö —Ç–∏–∫–µ—Ä–æ–≤ —Ç–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º —Ä—É—Å—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–≤–æ–∑–º–æ–∂–Ω—ã –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è)
        print(f"üåç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ–º —Ä—É—Å—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ {ticker}...")
        from nlp.sentiment import fetch_ru_news
        ru_texts = fetch_ru_news(hours=hours)
        all_texts.extend(ru_texts)

    if not all_texts:
        print(f"‚ùå –ù–æ–≤–æ—Å—Ç–∏ –¥–ª—è {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return 0

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –Ω–æ–≤–æ—Å—Ç—å —á–µ—Ä–µ–∑ LLM —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    print(f"ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(all_texts)} –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ LLM...")

    total_score = 0
    processed = 0

    for text in all_texts:
        try:
            sentiment = smart_classify(text, ticker)
            if sentiment == "positive":
                total_score += 1
            elif sentiment == "negative":
                total_score -= 1
            processed += 1
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            continue

    print(f"üìä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ {ticker}: {total_score} (–∏–∑ {processed} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π)")
    return total_score

def log_signal_trade(ticker: str, figi: str, signal: str, price: float, qty: int = 1):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–æ–∫ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º –±–æ—Ç–∞"""
    if signal in ['BUY', 'SELL']:
        try:
            result = log_trade(
                date=datetime.now().date(),
                ticker=ticker,
                figi=figi,
                side=signal,
                price=price,
                qty=qty
            )
            print(f"‚úÖ –°–¥–µ–ª–∫–∞ {signal} {ticker} –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞: {result}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ {ticker}: {e}")
    else:
        print(f"üìù {ticker}: —Å–∏–≥–Ω–∞–ª {signal} - —Å–¥–µ–ª–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")

def run_daily_analysis():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã
        print("üìä –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã...")
        prices = get_last_prices()

        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        print("üìà –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã...")
        signals = get_signals()

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º
        print("üìù –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã...")
        for figi, ticker in FIGIS.items():
            if ticker in prices and ticker in signals:
                log_signal_trade(ticker, figi, signals[ticker], prices[ticker])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = format_message(prices, signals)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
        if is_telegram_configured():
            print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram...")
            if send_telegram_message(message):
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å:")
                print(message)
        else:
            print("üìÑ Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å:")
            print("\n" + message)

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

def run_Telegram_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥"""
    if not TELEGRAM_TOKEN or TELEGRAM_TOKEN == "PLACEHOLDER":
        print("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API
    try:
        bot = telebot.TeleBot(TELEGRAM_TOKEN)
        bot.get_me()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤–Ω–µ—à–Ω–∏—Ö API
        newsapi_key = os.getenv("NEWSAPI_KEY")
        openai_key = os.getenv("OPENAI_API_KEY")

        print("üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö API:")
        print(f"   ‚Ä¢ NewsAPI: {'‚úÖ' if newsapi_key else '‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
        print(f"   ‚Ä¢ OpenAI: {'‚úÖ' if openai_key else '‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        try:
            import redis
            r = redis.Redis(host='0.0.0.0', port=6379, decode_responses=True, socket_timeout=3)
            r.ping()
            print("   ‚Ä¢ Redis: ‚úÖ")
        except Exception as e:
            print(f"   ‚Ä¢ Redis: ‚ùå ({e})")
            print("   üí° –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")

        print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    except Exception as e:
        if "409" in str(e):
            print("‚ùå –û—à–∏–±–∫–∞ 409: –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            print("üí° –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            return
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}")
            return

    @bot.message_handler(func=lambda message: True)
    def handle_message(msg):
        text = msg.text.strip() if msg.text else ""
        # print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.username}")
        # print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.first_name}")

        if text.startswith("/log"):
            parts = text.split()
            if len(parts) != 5:
                bot.reply_to(msg, "–§–æ—Ä–º–∞—Ç: /log BUY|SELL TICKER QTY PRICE")
                return

            _, side, ticker, qty, price = parts
            figi = FIGI_MAP.get(ticker.upper())
            if not figi:
                bot.reply_to(msg, f"FIGI –¥–ª—è {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            try:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –æ–±–ª–∞—Å—Ç—å—é –≤–∏–¥–∏–º–æ—Å—Ç–∏
                from utils.sheets_logger import log_trade

                # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                bot.reply_to(msg, f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–¥–µ–ª–∫—É: {side.upper()} {ticker.upper()} {qty} —à—Ç –ø–æ {price}...")

                # print(f"[DEBUG] –í—ã–∑—ã–≤–∞–µ–º log_trade –¥–ª—è {ticker}")

                resp = log_trade(
                    date=datetime.now().date(),
                    ticker=ticker.upper(),
                    figi=figi,
                    side=side.upper(),
                    price=float(price.replace(',', '.')),
                    qty=int(qty),
                    fees=0
                )
                bot.reply_to(msg, f"‚úÖ –∑–∞–ø–∏—Å–∞–ª —Å–¥–µ–ª–∫—É ({resp})")

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—Ö–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
                bot.reply_to(msg, f"üìä –î–µ—Ç–∞–ª–∏: {ticker.upper()} {side.upper()} {qty}x{price} = {int(qty) * float(price.replace(',', '.')):.2f} ‚ÇΩ")

            except Exception as e:
                error_msg = str(e)
                bot.reply_to(msg, f"‚ùå –æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {error_msg}")

                # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ Google Apps Script, –¥–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                if "Google Apps Script" in error_msg or "appendRow" in error_msg:
                    bot.reply_to(msg, """
üîß –ü—Ä–æ–±–ª–µ–º–∞ —Å Google Apps Script:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã Google Sheets
2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –ª–∏—Å—Ç–∞ (–æ–±—ã—á–Ω–æ 'Sheet1' –∏–ª–∏ '–õ–∏—Å—Ç1')
4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∫–∞–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                    """)
                else:
                    bot.reply_to(msg, f"üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª debug_sheets.log –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π")

        elif text.startswith("/prices"):
            try:
                prices = get_last_prices()
                message = "üí∞ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã:\n"
                for ticker, price in prices.items():
                    formatted_price = f"{price:,.2f}".replace(",", " ")
                    message += f"‚Ä¢ {ticker}: {formatted_price} ‚ÇΩ\n"
                bot.reply_to(msg, message)
            except Exception as e:
                bot.reply_to(msg, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω: {e}")

        elif text.lower().startswith("/signals"):
            parts = text.split()
            try:
                fast = int(parts[1]) if len(parts) > 1 else 20
                slow = int(parts[2]) if len(parts) > 2 else 50
                atr  = float(parts[3]) if len(parts) > 3 else 1.0
                interval = parts[4] if len(parts) > 4 else "hour"
                # –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã —Ç–∏–∫–µ—Ä—ã ‚Üí –±–µ—Ä—ë–º –∏—Ö, –∏–Ω–∞—á–µ –≤—Å–µ –∏–∑ FIGI_MAP
                tickers = [t.upper() for t in parts[5:]] if len(parts) > 5 else FIGI_MAP.keys()
            except (ValueError, IndexError):
                bot.reply_to(msg,
                    "–§–æ—Ä–º–∞—Ç: /signals FAST SLOW ATR [INTERVAL] [TICKER...]\n"
                    "–ü—Ä–∏–º–µ—Ä: /signals 5 15 0.5 15min GAZP LKOH\n"
                    "–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã: 1min, 5min, 15min, 30min, hour, day")
                return

            reply = f"üìä –°–∏–≥–Ω–∞–ª—ã SMA{fast}/{slow}, ATR‚â•{atr}, {interval}:\n"
            for tk in tickers:
                figi = FIGI_MAP.get(tk)
                if not figi:
                    reply += f"‚Ä¢ {tk:<6} ‚Üí üö´ –Ω–µ—Ç FIGI\n"
                    continue
                try:
                    sig = generate_signal(figi,
                                          interval=interval,
                                          fast=fast,
                                          slow=slow,
                                          atr_ratio=atr)
                    reply += f"‚Ä¢ {tk:<6} ‚Üí {sig}\n"
                except Exception as e:
                    reply += f"‚Ä¢ {tk:<6} ‚Üí ‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}\n"
            bot.reply_to(msg, reply)
            return

        elif text.startswith("/test_sheets"):
            # print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: '{text}'")
            bot.reply_to(msg, "üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets...")

            try:
                from utils.sheets_logger import log_trade
                # print("[DEBUG] –ò–º–ø–æ—Ä—Ç utils.sheets_logger —É—Å–ø–µ—à–µ–Ω")

                result = log_trade(
                    date=datetime.now().date(),
                    ticker="TEST",
                    figi="TEST_FIGI", 
                    side="BUY",
                    price=100.0,
                    qty=1,
                    fees=0.1
                )

                # print(f"[DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: {result}")
                bot.reply_to(msg, f"‚úÖ –¢–µ—Å—Ç Google Sheets —É—Å–ø–µ—à–µ–Ω!\nüìù –û—Ç–≤–µ—Ç: {result[:200]}...")

            except Exception as e:
                # print(f"[DEBUG] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
                bot.reply_to(msg, f"‚ùå –¢–µ—Å—Ç Google Sheets –Ω–µ –ø—Ä–æ—à–µ–ª:\n{str(e)[:500]}...")

        elif text.startswith("/config"):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤)
            webhook_url = os.getenv("SHEETS_WEBHOOK_URL", "–ù–ï –ù–ê–°–¢–†–û–ï–ù–û")
            token_status = "–ù–ê–°–¢–†–û–ï–ù–û" if os.getenv("SHEETS_TOKEN") else "–ù–ï –ù–ê–°–¢–†–û–ï–ù–û"

            config_msg = f"""üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google Sheets:

üì° Webhook URL: {webhook_url[:50]}...
üîë Token: {token_status}

üí° –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test_sheets"""

            bot.reply_to(msg, config_msg)

        elif text == "/help":
            help_text = """ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/log BUY|SELL TICKER QTY PRICE - –∑–∞–ø–∏—Å–∞—Ç—å —Å–¥–µ–ª–∫—É
–ü—Ä–∏–º–µ—Ä: /log BUY YNDX 10 2500.50

/prices - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
/signals [fast] [slow] [ATR] [interval] [ticker...] - —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
–ü—Ä–∏–º–µ—Ä: /signals 5 15 0.5 15min GAZP LKOH
–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã: 1min, 5min, 15min, 30min, hour, day
–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: /signals = /signals 20 50 1.0 hour (–≤—Å–µ —Ç–∏–∫–µ—Ä—ã)

/sentiment TICKER [hours] - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
–ü—Ä–∏–º–µ—Ä: /sentiment NVDA 24 (–Ω–æ–≤–æ—Å—Ç–∏ NVDA –∑–∞ 24 —á–∞—Å–∞)
–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: /sentiment TICKER = /sentiment TICKER 48 (–∑–∞ 48 —á–∞—Å–æ–≤)

/fresh_news [TICKER] [HOURS] - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏
–ü—Ä–∏–º–µ—Ä: /fresh_news NVDA 12 (–æ–±–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ NVDA –∑–∞ 12 —á–∞—Å–æ–≤)

/ideas [fast] [slow] [ATR] [hours] [ticker...] - –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–µ –∏–¥–µ–∏ (—Ç–µ—Ö–∞–Ω–∞–ª–∏–∑ + –Ω–æ–≤–æ—Å—Ç–∏)
–ü—Ä–∏–º–µ—Ä: /ideas 5 15 0.5 6 NVDA AMD  (–Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ 6 —á–∞—Å–æ–≤)
–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: /ideas 5 15 0 24 (–≤—Å–µ —Ç–∏–∫–µ—Ä—ã, –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ 24—á)

/pnl - –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—â–∏–π P/L
/debug - –ø–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥ –æ—Ç–ª–∞–¥–∫–∏
/config - –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Google Sheets
/test_sheets - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã: YNDX, FXIT"""
            bot.reply_to(msg, help_text)

        elif text.startswith("/pnl"):
             try:
                from utils.sheets_logger import get_pnl
                # print(f"[DEBUG] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º P/L —Å URL: {url}")
                pnl = get_pnl()

                if pnl > 0:
                    emoji = "üü¢"
                    status = "–ü—Ä–∏–±—ã–ª—å"
                elif pnl < 0:
                    emoji = "üî¥" 
                    status = "–£–±—ã—Ç–æ–∫"
                else:
                    emoji = "üü°"
                    status = "–í –Ω–æ–ª—å"

                pnl_message = f"""
üí∞ –¢–µ–∫—É—â–∏–π P/L

{emoji} {status}: {pnl:,.2f} ‚ÇΩ

üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}
                """.strip()

                bot.reply_to(msg, pnl_message)

             except Exception as e:
                error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è P/L: {e}"
                bot.reply_to(msg, error_message)

        elif text.startswith("/fresh_news"):
            parts = text.split()
            try:
                ticker = parts[1].upper() if len(parts) > 1 else "YNDX"
                hours = int(parts[2]) if len(parts) > 2 else 6
            except (ValueError, IndexError):
                bot.reply_to(msg, "–§–æ—Ä–º–∞—Ç: /fresh_news [TICKER] [HOURS]\n–ü—Ä–∏–º–µ—Ä: /fresh_news NVDA 12")
                return

            bot.reply_to(msg, f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è—é –Ω–æ–≤–æ—Å—Ç–∏ {ticker} –∑–∞ {hours}—á...")

            try:
                sentiment = get_sentiment_score(ticker, hours=hours, force_refresh=True)
                emoji = "üü¢" if sentiment > 0 else "üî¥" if sentiment < 0 else "üü°"
                bot.reply_to(msg, f"{emoji} –°–≤–µ–∂–∏–π –∞–Ω–∞–ª–∏–∑ {ticker}: {sentiment}")
            except Exception as e:
                bot.reply_to(msg, f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

        elif text.lower().startswith("/ideas"):
            parts = text.split()
            try:
                # 1-3 –∞—Ä–≥—É–º–µ–Ω—Ç—ã ‚Äì fast, slow, atr
                fast = int(parts[1]) if len(parts) > 1 else 5
                slow = int(parts[2]) if len(parts) > 2 else 15
                atr = float(parts[3]) if len(parts) > 3 else 0

                # 4-–π –∞—Ä–≥—É–º–µ–Ω—Ç (hours) ‚Äì –∑–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –±—Ä–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏
                hours = int(parts[4]) if len(parts) > 4 else 24

                # –≤—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ hours ‚Äì —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤
                tickers = [t.upper() for t in parts[5:]] if len(parts) > 5 else list(FIGI_MAP.keys())
            except (ValueError, IndexError):
                bot.reply_to(msg,
                    "–§–æ—Ä–º–∞—Ç: /ideas [fast] [slow] [ATR] [hours] [ticker...]\n"
                    "–ü—Ä–∏–º–µ—Ä: /ideas 5 15 0.5 6 NVDA AMD  (–Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ 6 —á–∞—Å–æ–≤)\n"
                    "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: /ideas 5 15 0 24 (–≤—Å–µ —Ç–∏–∫–µ—Ä—ã, –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ 24—á)")
                return

            reply = f"üí° –ö–æ–º–ø–æ–∑–∏—Ç-–∏–¥–µ–∏ SMA{fast}/{slow} ATR‚â•{atr} –Ω–æ–≤–æ—Å—Ç–∏‚â§{hours}—á:\n"

            for tk in tickers:
                fg = FIGI_MAP.get(tk)
                if not fg:
                    reply += f"‚Ä¢ {tk:<6} ‚Üí üö´ –Ω–µ—Ç FIGI\n"
                    continue

                try:
                    signal = generate_signal(fg, fast=fast, slow=slow, atr_ratio=atr)
                    tech = 1 if signal == "BUY" else -1 if signal == "SELL" else 0
                    sent = get_sentiment_score(tk, hours=hours)
                    score = tech + sent
                    if abs(score) >= 2:
                        side = "LONG" if score > 0 else "SHORT"
                        reply += f"‚Ä¢ {tk:<6} {side} (score {score})\n"
                except Exception as e:
                    reply += f"‚Ä¢ {tk:<6} ‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}\n"

            if reply.strip().endswith(":"):
                reply += "–ù–µ—Ç —Å–∏–ª—å–Ω—ã—Ö –∏–¥–µ–π —Å–µ–π—á–∞—Å."
            bot.reply_to(msg, reply)
            return

        elif text.startswith("/sentiment"):
            parts = text.split()
            if len(parts) < 2:
                bot.reply_to(msg, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sentiment TICKER [—á–∞—Å–æ–≤]")
                return
            
            ticker = parts[1].upper()
            try:
                hours = int(parts[2]) if len(parts) > 2 else 48
            except ValueError:
                bot.reply_to(msg, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
                return
            
            try:
                import sqlite3
                import os
                
                db_path = os.getenv("NEWS_DB", "db/news_cache.db")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                if not os.path.exists(db_path):
                    bot.reply_to(msg, f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
                    return
                
                db = sqlite3.connect(db_path)
                query = """
                  SELECT dt, headline, label
                  FROM   news
                  WHERE  ticker = ? AND dt >= datetime('now', ? || ' hours')
                  ORDER  BY dt DESC
                  LIMIT  5
                """
                rows = db.execute(query, (ticker, -hours)).fetchall()
                db.close()
                
                if not rows:
                    bot.reply_to(msg, f"–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ {ticker} –∑–∞ {hours} —á –Ω–µ—Ç.")
                    return
                
                def emoji(lbl):
                    return {1:"üëç", -1:"üëé", 0:"‚ö™"}.get(lbl, "‚ùì")
                
                lines = [f"üì∞ *{ticker}* ¬∑ {hours}—á\n"]
                for dt_str, hline, lbl in rows:
                    lines.append(f"{emoji(lbl)} {hline[:120]}")   # –æ–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ
                
                bot.reply_to(msg, "\n".join(lines), parse_mode="Markdown")
                
            except sqlite3.Error as e:
                bot.reply_to(msg, f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            except Exception as e:
                bot.reply_to(msg, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")

        elif text.startswith("/debug"):
            try:
                # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫ –∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–∞
                with open("debug_sheets.log", "r", encoding="utf-8") as f:
                    lines = f.readlines()
                    last_lines = lines[-10:] if len(lines) > 10 else lines
                    log_content = "".join(last_lines)

                if log_content:
                    bot.reply_to(msg, f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞:\n```\n{log_content}\n```")

            except Exception as e:
                bot.reply_to(msg, f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {e}")

        else:
            bot.reply_to(msg, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help")

    bot.infinity_polling()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–º–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å)
    # run_daily_analysis()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
    run_Telegram_bot()