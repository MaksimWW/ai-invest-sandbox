
#!/usr/bin/env python
import os
import requests
import telebot
from datetime import datetime
from tinkoff.invest import Client
from signals.sma_breakout import generate_signal
from trade_logger import log_trade

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TINKOFF_SANDBOX_TOKEN = os.getenv("TINKOFF_SANDBOX_TOKEN")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# FIGI –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
FIGIS = {
    "BBG004730N88": "YNDX",  # –Ø–Ω–¥–µ–∫—Å
    "BBG00Y91R9T3": "FXIT"   # Fix Price
}

# –û–±—Ä–∞—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ FIGI –ø–æ —Ç–∏–∫–µ—Ä—É
FIGI_MAP = {ticker: figi for figi, ticker in FIGIS.items()}

def get_last_prices():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ Tinkoff Sandbox API"""
    if not TINKOFF_SANDBOX_TOKEN:
        raise RuntimeError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TINKOFF_SANDBOX_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    
    prices = {}
    
    with Client(TINKOFF_SANDBOX_TOKEN, app_name="daily-plan-bot") as client:
        for figi, ticker in FIGIS.items():
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É —á–µ—Ä–µ–∑ MarketData API
                response = client.market_data.get_last_prices(figi=[figi])
                if response.last_prices:
                    price = response.last_prices[0].price
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ä—É–±–ª–∏
                    price_rub = price.units + price.nano / 1_000_000_000
                    prices[ticker] = price_rub
                else:
                    prices[ticker] = 0.0
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {ticker}: {e}")
                prices[ticker] = 0.0
    
    return prices

def get_signals():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –≤—Å–µ—Ö FIGI"""
    signals = {}
    
    for figi, ticker in FIGIS.items():
        try:
            signal = generate_signal(figi, 'hour')
            signals[ticker] = signal
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {ticker}: {e}")
            signals[ticker] = "HOLD"
    
    return signals

def format_message(prices, signals):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–Ω–∞–º–∏ –∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏"""
    today = datetime.now().strftime("%Y-%m-%d")
    message = f"üìà –ü–ª–∞–Ω –Ω–∞ {today}\n"
    
    for ticker in prices.keys():
        price = prices[ticker]
        signal = signals.get(ticker, "HOLD")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º —Ç—ã—Å—è—á
        formatted_price = f"{price:,.2f}".replace(",", " ")
        message += f"‚Ä¢ {ticker}: {formatted_price} ‚ÇΩ\n"
        message += f"  Signal: {signal}\n"
    
    return message.strip()

def is_telegram_configured():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ Telegram"""
    return (TELEGRAM_TOKEN and TELEGRAM_CHAT_ID and 
            TELEGRAM_TOKEN != "PLACEHOLDER" and 
            TELEGRAM_CHAT_ID != "PLACEHOLDER")

def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    if not is_telegram_configured():
        return False
    
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message,
        "parse_mode": "HTML"
    }
    
    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False

def log_signal_trade(ticker: str, figi: str, signal: str, price: float, qty: int = 1):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–æ–∫ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º –±–æ—Ç–∞"""
    if signal in ['BUY', 'SELL']:
        try:
            result = log_trade(
                date=datetime.now().date(),
                ticker=ticker,
                figi=figi,
                side=signal,
                price=price,
                qty=qty
            )
            print(f"‚úÖ –°–¥–µ–ª–∫–∞ {signal} {ticker} –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞: {result}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ {ticker}: {e}")
    else:
        print(f"üìù {ticker}: —Å–∏–≥–Ω–∞–ª {signal} - —Å–¥–µ–ª–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")

def run_daily_analysis():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã
        print("üìä –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã...")
        prices = get_last_prices()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        print("üìà –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã...")
        signals = get_signals()
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º
        print("üìù –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã...")
        for figi, ticker in FIGIS.items():
            if ticker in prices and ticker in signals:
                log_signal_trade(ticker, figi, signals[ticker], prices[ticker])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = format_message(prices, signals)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
        if is_telegram_configured():
            print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram...")
            if send_telegram_message(message):
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å:")
                print(message)
        else:
            print("üìÑ Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å:")
            print("\n" + message)
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

def run_telegram_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥"""
    if not TELEGRAM_TOKEN or TELEGRAM_TOKEN == "PLACEHOLDER":
        print("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        return
    
    bot = telebot.TeleBot(TELEGRAM_TOKEN)
    
    @bot.message_handler(func=lambda message: True)
    def handle_message(msg):
        text = msg.text.strip()
        
        if text.startswith("/log"):
            parts = text.split()
            if len(parts) != 5:
                bot.reply_to(msg, "–§–æ—Ä–º–∞—Ç: /log BUY|SELL TICKER QTY PRICE")
                return

            _, side, ticker, qty, price = parts
            figi = FIGI_MAP.get(ticker.upper())
            if not figi:
                bot.reply_to(msg, f"FIGI –¥–ª—è {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            try:
                # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                bot.reply_to(msg, f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–¥–µ–ª–∫—É: {side.upper()} {ticker.upper()} {qty} —à—Ç –ø–æ {price}...")
                
                resp = log_trade(
                    date=datetime.now().date(),
                    ticker=ticker.upper(),
                    figi=figi,
                    side=side.upper(),
                    price=float(price.replace(',', '.')),
                    qty=int(qty),
                    fees=0
                )
                bot.reply_to(msg, f"‚úÖ –∑–∞–ø–∏—Å–∞–ª —Å–¥–µ–ª–∫—É ({resp})")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—Ö–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
                bot.reply_to(msg, f"üìä –î–µ—Ç–∞–ª–∏: {ticker.upper()} {side.upper()} {qty}x{price} = {int(qty) * float(price.replace(',', '.')):.2f} ‚ÇΩ")
                
            except Exception as e:
                error_msg = str(e)
                bot.reply_to(msg, f"‚ùå –æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {error_msg}")
                
                # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ Google Apps Script, –¥–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                if "Google Apps Script" in error_msg or "appendRow" in error_msg:
                    bot.reply_to(msg, """
üîß –ü—Ä–æ–±–ª–µ–º–∞ —Å Google Apps Script:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã Google Sheets
2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –ª–∏—Å—Ç–∞ (–æ–±—ã—á–Ω–æ 'Sheet1' –∏–ª–∏ '–õ–∏—Å—Ç1')
4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∫–∞–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                    """)
                else:
                    bot.reply_to(msg, f"üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª debug_sheets.log –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π")
        
        elif text.startswith("/prices"):
            try:
                prices = get_last_prices()
                message = "üí∞ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã:\n"
                for ticker, price in prices.items():
                    formatted_price = f"{price:,.2f}".replace(",", " ")
                    message += f"‚Ä¢ {ticker}: {formatted_price} ‚ÇΩ\n"
                bot.reply_to(msg, message)
            except Exception as e:
                bot.reply_to(msg, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω: {e}")
        
        elif text.startswith("/signals"):
            try:
                signals = get_signals()
                message = "üìä –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã:\n"
                for ticker, signal in signals.items():
                    message += f"‚Ä¢ {ticker}: {signal}\n"
                bot.reply_to(msg, message)
            except Exception as e:
                bot.reply_to(msg, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        
        elif text.startswith("/debug"):
            try:
                # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫ –∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–∞
                with open("debug_sheets.log", "r", encoding="utf-8") as f:
                    lines = f.readlines()
                    last_lines = lines[-10:] if len(lines) > 10 else lines
                    log_content = "".join(last_lines)
                
                if log_content:
                    bot.reply_to(msg, f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞:\n```\n{log_content}\n```", parse_mode="Markdown")
                else:
                    bot.reply_to(msg, "üìã –õ–æ–≥-—Ñ–∞–π–ª –ø—É—Å—Ç")
            except FileNotFoundError:
                bot.reply_to(msg, "üìã –õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            except Exception as e:
                bot.reply_to(msg, f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {e}")
        
        elif text == "/test_sheets":
            try:
                from utils.sheets_logger import log_trade
                result = log_trade(
                    date=datetime.now().date(),
                    ticker="TEST",
                    figi="TEST_FIGI",
                    side="BUY",
                    price=100.0,
                    qty=1,
                    fees=0.1
                )
                bot.reply_to(msg, f"‚úÖ –¢–µ—Å—Ç Google Sheets —É—Å–ø–µ—à–µ–Ω: {result}")
            except Exception as e:
                bot.reply_to(msg, f"‚ùå –¢–µ—Å—Ç Google Sheets –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
        
        elif text == "/help":
            help_text = """ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/log BUY|SELL TICKER QTY PRICE - –∑–∞–ø–∏—Å–∞—Ç—å —Å–¥–µ–ª–∫—É
–ü—Ä–∏–º–µ—Ä: /log BUY YNDX 10 2500.50

/prices - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
/signals - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
/debug - –ø–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥ –æ—Ç–ª–∞–¥–∫–∏
/test_sheets - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã: YNDX, FXIT"""
            bot.reply_to(msg, help_text)
        
        else:
            bot.reply_to(msg, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
    
    print("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã"""
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "bot":
        # –†–µ–∂–∏–º Telegram –±–æ—Ç–∞
        run_telegram_bot()
    else:
        # –†–µ–∂–∏–º —Ä–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        run_daily_analysis()

if __name__ == "__main__":
    main()
