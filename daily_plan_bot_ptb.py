# ==== python-telegram-bot v20 =================================================
import os, logging
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)
from tinkoff_api import get_prices_with_fallback, check_api_connection, format_price_change

TOKEN = os.getenv("TELEGRAM_TOKEN")  # –≤–æ–∑—å–º—ë—Ç –∏–∑ Secrets

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s ‚îÇ %(message)s",
    level=logging.INFO,
    datefmt="%H:%M:%S"
)

# –û—Ç–∫–ª—é—á–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ HTTP –ª–æ–≥–∏
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram").setLevel(logging.WARNING)
logging.getLogger("urllib3").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –•–≠–ù–î–õ–ï–†–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞"""
    try:
        logger.info("üöÄ /start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        
        message = """ü§ñ **AI Invest PlanBot –∑–∞–ø—É—â–µ–Ω!**

üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /help - –ø–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
‚Ä¢ /prices - —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–π
‚Ä¢ /signals - —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã  
‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!"""
        
        await update.message.reply_text(message, parse_mode='Markdown')
        logger.info("‚úÖ /start - –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /start")

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    try:
        logger.info("‚ùì /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
        
        message = """ü§ñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º AI Invest PlanBot**

üìà **–¢–æ—Ä–≥–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/prices` - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–π YNDX, FXIT
‚Ä¢ `/signals` - –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –∞–∫—Ü–∏–π

‚öôÔ∏è **–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/status` - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π (Tinkoff API, Google Sheets)
‚Ä¢ `/help` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
‚Ä¢ `/start` - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞

üìä **–û –±–æ—Ç–µ:**
–ë–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫ –∞–∫—Ü–∏–π, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏ –≤–µ–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å."""
        
        await update.message.reply_text(message, parse_mode='Markdown')
        logger.info("‚úÖ /help - –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_help: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /help")

async def cmd_prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/prices ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–π"""
    try:
        logger.info("üìà /prices - –∑–∞–ø—Ä–æ—Å —Ü–µ–Ω –∞–∫—Ü–∏–π")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å
        prices = get_prices_with_fallback()
        api_connected = check_api_connection()
        
        if api_connected:
            mode_text = "‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Tinkoff API"
        else:
            mode_text = "‚ö†Ô∏è DEMO —Ä–µ–∂–∏–º - —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üìà **–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–π**\n\n{mode_text}:\n\n"
        
        for ticker, price in prices.items():
            change_icon = format_price_change(price, demo_mode=not api_connected)
            message += f"‚Ä¢ **{ticker}**: {price:,.2f} ‚ÇΩ {change_icon}\n"
        
        message += f"\nüïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: —Ç–æ–ª—å–∫–æ —á—Ç–æ"
        
        if not api_connected:
            message += "\nüí° –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ TINKOFF_SANDBOX_TOKEN"
        
        await update.message.reply_text(message, parse_mode='Markdown')
        logger.info("‚úÖ /prices - –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_prices: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω: {str(e)}")

async def cmd_signals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/signals ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
    try:
        logger.info("üìä /signals - –∑–∞–ø—Ä–æ—Å —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        from signals.sma_breakout import generate_signal
        
        api_connected = check_api_connection()
        mode_text = "‚úÖ –†–µ–∞–ª—å–Ω—ã–µ SMA —Å–∏–≥–Ω–∞–ª—ã" if api_connected else "‚ö†Ô∏è DEMO —Ä–µ–∂–∏–º"
        
        message = f"üìä **–¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã (SMA 20/50)**\n\n{mode_text}:\n\n"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
        main_tickers = ["YNDX", "FXIT", "GAZP", "SBER"]
        
        for ticker in main_tickers:
            figi = FIGI_MAP.get(ticker)
            if figi:
                try:
                    signal = generate_signal(figi, interval='hour', fast=20, slow=50)
                    signal_emoji = {"BUY": "üü¢", "SELL": "üî¥", "HOLD": "üü°"}.get(signal, "‚ö™")
                    
                    signal_desc = {
                        "BUY": "SMA20 –ø–µ—Ä–µ—Å–µ–∫–ª–∞ SMA50 ‚ÜóÔ∏è",
                        "SELL": "SMA20 –ø–µ—Ä–µ—Å–µ–∫–ª–∞ SMA50 ‚ÜòÔ∏è", 
                        "HOLD": "–ë–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ, –Ω–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è"
                    }.get(signal, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª")
                    
                    message += f"‚Ä¢ **{ticker}**: {signal_emoji} {signal}\n"
                    message += f"  ‚îî {signal_desc}\n\n"
                    
                except Exception as e:
                    message += f"‚Ä¢ **{ticker}**: ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞\n\n"
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ {ticker}: {e}")
        
        message += f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: —Ç–æ–ª—å–∫–æ —á—Ç–æ\n"
        message += f"üìà –ò–Ω—Ç–µ—Ä–≤–∞–ª: —á–∞—Å–æ–≤—ã–µ —Å–≤–µ—á–∏\n"
        message += f"üìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä: SMA(20) vs SMA(50)"
        
        if not api_connected:
            message += "\nüí° –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ TINKOFF_SANDBOX_TOKEN"
        
        await update.message.reply_text(message, parse_mode='Markdown')
        logger.info("‚úÖ /signals - –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_signals: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {str(e)}")

async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/status ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    try:
        logger.info("‚öôÔ∏è /status - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Tinkoff API
        tinkoff_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if check_api_connection() else "‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        tinkoff_token = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω" if os.getenv("TINKOFF_SANDBOX_TOKEN") else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        openai_key = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω" if os.getenv("OPENAI_API_KEY") else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        sheets_url = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω" if os.getenv("SHEETS_WEBHOOK_URL") else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        
        message = f"""‚öôÔ∏è **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã**

üîó **API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**
‚Ä¢ Telegram API: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ Tinkoff API: {tinkoff_status}
‚Ä¢ Google Sheets: ‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
‚Ä¢ OpenAI API: ‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω

üîë **–¢–æ–∫–µ–Ω—ã –∏ –∫–ª—é—á–∏:**
‚Ä¢ TINKOFF_SANDBOX_TOKEN: {tinkoff_token}
‚Ä¢ OPENAI_API_KEY: {openai_key}
‚Ä¢ SHEETS_WEBHOOK_URL: {sheets_url}

üìä **–§—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: ‚úÖ 
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω: {'‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' if check_api_connection() else '‚ö†Ô∏è DEMO —Ä–µ–∂–∏–º'}
‚Ä¢ –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã: ‚ö†Ô∏è DEMO —Ä–µ–∂–∏–º
‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: ‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ

üîß **–î–ª—è –ø–æ–ª–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ:**
1. TINKOFF_SANDBOX_TOKEN –≤ .env
2. OPENAI_API_KEY –≤ .env  
3. SHEETS_WEBHOOK_URL –≤ .env"""
        
        await update.message.reply_text(message, parse_mode='Markdown')
        logger.info("‚úÖ /status - –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_status: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∑–∞–ø—É—Å–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"‚ùå –û—à–∏–±–∫–∞: {context.error}")

def check_and_stop_other_bots():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞"""
    import psutil
    import time
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞...")
    
    current_pid = os.getpid()
    killed_count = 0
    
    bot_files = [
        'daily_plan_bot_ptb.py',
        'daily_plan_bot.py', 
        'daily_plan_bot_fixed.py',
        'daily_plan_bot_mock.py'
    ]
    
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            if proc.info['pid'] == current_pid:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
                
            cmdline = proc.info['cmdline']
            if cmdline and len(cmdline) > 1:
                if 'python' in cmdline[0].lower():
                    for bot_file in bot_files:
                        if any(bot_file in cmd for cmd in cmdline):
                            print(f"üî¥ –ù–∞–π–¥–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä: PID {proc.info['pid']}")
                            try:
                                proc.terminate()
                                proc.wait(timeout=3)
                                print(f"‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä {proc.info['pid']} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                                killed_count += 1
                            except psutil.TimeoutExpired:
                                proc.kill()
                                print(f"üî• –≠–∫–∑–µ–º–ø–ª—è—Ä {proc.info['pid']} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
                                killed_count += 1
                            except Exception as e:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
                            break
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            pass
    
    if killed_count > 0:
        print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: {killed_count}")
        print("‚è±Ô∏è –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã...")
        time.sleep(3)
    else:
        print("‚úÖ –î—Ä—É–≥–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

def run_bot() -> None:
    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ (PTB v20)")
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    print(f"üì± Token: {TOKEN[:10] if TOKEN else '–ù–ï –ù–ê–ô–î–ï–ù'}...")
    
    CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
    print(f"üí¨ Chat ID: {CHAT_ID if CHAT_ID else '–ù–ï –ù–ê–ô–î–ï–ù'}")
    
    if not TOKEN:
        print("‚ùå –û–®–ò–ë–ö–ê: TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    try:
        check_and_stop_other_bots()
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—Ä—É–≥–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: {e}")
    
    try:
        application = ApplicationBuilder().token(TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", cmd_start))
        application.add_handler(CommandHandler("help", cmd_help))
        application.add_handler(CommandHandler("prices", cmd_prices))
        application.add_handler(CommandHandler("signals", cmd_signals))
        application.add_handler(CommandHandler("status", cmd_status))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        print("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print("üöÄ –ó–∞–ø—É—Å–∫ polling —Ä–µ–∂–∏–º–∞...")
        print("üìû –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É /start –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")
        print("-" * 50)
        
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        application.run_polling(allowed_updates=["message", "callback_query"])
        
    except Exception as e:
        error_msg = str(e)
        if "Conflict: terminated by other getUpdates request" in error_msg:
            print("‚ùå –ö–û–ù–§–õ–ò–ö–¢: –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞!")
            print("üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å: python stop_all_bots.py")
            print("üîÑ –ó–∞—Ç–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
        else:
            print(f"‚ùå –û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê –ë–û–¢–ê: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return

# –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å:  python daily_plan_bot_ptb.py
if __name__ == "__main__":
    run_bot()
# ==============================================================================