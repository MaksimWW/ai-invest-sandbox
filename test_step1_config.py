
#!/usr/bin/env python
import os
from dotenv import load_dotenv

def test_step1_config():
    """–®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    print("üîç –®–ê–ì–ò 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
    load_dotenv()
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    required_vars = {
        "TINKOFF_SANDBOX_TOKEN": "–¢–æ–∫–µ–Ω Tinkoff API",
        "TELEGRAM_TOKEN": "–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞", 
        "TELEGRAM_CHAT_ID": "ID —á–∞—Ç–∞ Telegram",
        "SHEETS_WEBHOOK_URL": "URL webhook Google Sheets",
        "SHEETS_TOKEN": "–¢–æ–∫–µ–Ω –¥–ª—è Google Sheets"
    }
    
    print("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("-" * 30)
    
    all_ok = True
    
    for var_name, description in required_vars.items():
        value = os.getenv(var_name)
        
        if value:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if len(value) > 10:
                masked_value = value[:5] + "..." + value[-5:]
            else:
                masked_value = value[:3] + "..."
            
            print(f"‚úÖ {var_name}: {masked_value}")
        else:
            print(f"‚ùå {var_name}: –ù–ï –ù–ê–ô–î–ï–ù–û")
            all_ok = False
        
        print(f"   ({description})")
        print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    print("üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª:")
    print("-" * 30)
    
    if os.path.exists(".env"):
        print("‚úÖ –§–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ß–∏—Ç–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(".env")
        print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–±–µ–∑ –≤—ã–≤–æ–¥–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤)
        with open(".env", "r") as f:
            lines = f.readlines()
            non_empty_lines = [line for line in lines if line.strip() and not line.startswith("#")]
            print(f"üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {len(non_empty_lines)}")
    else:
        print("‚ùå –§–∞–π–ª .env –ù–ï –ù–ê–ô–î–ï–ù!")
        all_ok = False
    
    print("\n" + "=" * 50)
    
    if all_ok:
        print("‚úÖ –í–°–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ù–ê–°–¢–†–û–ï–ù–´ –ö–û–†–†–ï–ö–¢–ù–û!")
        print("üöÄ –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É")
        return True
    else:
        print("‚ùå –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò!")
        print("üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º")
        return False

if __name__ == "__main__":
    test_step1_config()
