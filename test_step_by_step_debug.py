
#!/usr/bin/env python
"""
üîç –ü–û–®–ê–ì–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê GOOGLE SHEETS
====================================
–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
"""

import os
import sys
import requests
import json
from datetime import datetime
from dotenv import load_dotenv

def step1_check_environment():
    """–®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –®–ê–ì 1: –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø")
    print("=" * 50)
    
    load_dotenv()
    
    webhook_url = os.getenv("SHEETS_WEBHOOK_URL")
    token = os.getenv("SHEETS_TOKEN")
    
    print(f"üì° SHEETS_WEBHOOK_URL: {webhook_url if webhook_url else '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}")
    print(f"üîë SHEETS_TOKEN: {token if token else '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}")
    
    if not webhook_url or not token:
        print("\n‚ùå –û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
        print("–î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:")
        print("SHEETS_WEBHOOK_URL=https://script.google.com/macros/s/YOUR_SCRIPT_ID/exec")
        print("SHEETS_TOKEN=mySecret123")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç URL
    if not webhook_url.startswith("https://script.google.com/macros/s/"):
        print("‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: URL –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ Google Apps Script webhook")
        print("   –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: https://script.google.com/macros/s/SCRIPT_ID/exec")
    
    print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –ø–æ—Ä—è–¥–∫–µ")
    return True

def step2_test_network_connection():
    """–®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("\nüîç –®–ê–ì 2: –ü–†–û–í–ï–†–ö–ê –°–ï–¢–ï–í–û–ì–û –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø")
    print("=" * 50)
    
    webhook_url = os.getenv("SHEETS_WEBHOOK_URL")
    
    try:
        print("üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL...")
        response = requests.get(webhook_url, timeout=10)
        print(f"‚úÖ URL –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
        return True
    except requests.exceptions.Timeout:
        print("‚ùå –¢–∞–π–º–∞—É—Ç - URL –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
        return False
    except requests.exceptions.ConnectionError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def step3_test_simple_post():
    """–®–∞–≥ 3: –ü—Ä–æ—Å—Ç–æ–π POST –∑–∞–ø—Ä–æ—Å"""
    print("\nüîç –®–ê–ì 3: –¢–ï–°–¢ –ü–†–û–°–¢–û–ì–û POST –ó–ê–ü–†–û–°–ê")
    print("=" * 50)
    
    webhook_url = os.getenv("SHEETS_WEBHOOK_URL")
    token = os.getenv("SHEETS_TOKEN")
    
    # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π payload
    simple_payload = {
        "test": "hello",
        "token": token
    }
    
    try:
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π POST –∑–∞–ø—Ä–æ—Å...")
        print(f"üìã Payload: {simple_payload}")
        
        response = requests.post(
            webhook_url,
            data=simple_payload,
            timeout=15,
            headers={'Content-Type': 'application/x-www-form-urlencoded'}
        )
        
        print(f"üìä HTTP Status: {response.status_code}")
        print(f"üìÑ Response: {response.text[:200]}...")
        
        if response.status_code == 200:
            print("‚úÖ POST –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def step4_test_ping_endpoint():
    """–®–∞–≥ 4: –¢–µ—Å—Ç ping endpoint"""
    print("\nüîç –®–ê–ì 4: –¢–ï–°–¢ PING ENDPOINT")
    print("=" * 50)
    
    webhook_url = os.getenv("SHEETS_WEBHOOK_URL")
    token = os.getenv("SHEETS_TOKEN")
    
    ping_payload = {
        "test": "ping",
        "token": token
    }
    
    try:
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –∑–∞–ø—Ä–æ—Å...")
        response = requests.post(webhook_url, data=ping_payload, timeout=15)
        
        print(f"üìä HTTP Status: {response.status_code}")
        response_text = response.text.strip()
        print(f"üìÑ Response: {response_text}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if response_text.startswith('<!DOCTYPE html>'):
            print("‚ùå –ü–æ–ª—É—á–µ–Ω HTML –≤–º–µ—Å—Ç–æ JSON - –æ—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ")
            analyze_html_error(response_text)
            return False
        
        try:
            json_response = json.loads(response_text)
            if json_response.get("ok") == True:
                print("‚úÖ Ping endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                return True
            else:
                print(f"‚ùå Ping failed: {json_response}")
                return False
        except json.JSONDecodeError:
            print(f"‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {response_text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ ping –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def step5_test_data_write():
    """–®–∞–≥ 5: –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –®–ê–ì 5: –¢–ï–°–¢ –ó–ê–ü–ò–°–ò –î–ê–ù–ù–´–• –í –¢–ê–ë–õ–ò–¶–£")
    print("=" * 50)
    
    webhook_url = os.getenv("SHEETS_WEBHOOK_URL")
    token = os.getenv("SHEETS_TOKEN")
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π payload –¥–ª—è –∑–∞–ø–∏—Å–∏
    write_payload = {
        "date": "2025-06-12",
        "ticker": "DEBUG_TEST",
        "figi": "DEBUG_FIGI",
        "side": "BUY",
        "price": "99.99",
        "qty": "1",
        "fees": "0.0",
        "token": token
    }
    
    try:
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏...")
        print(f"üìã Payload: {write_payload}")
        
        response = requests.post(webhook_url, data=write_payload, timeout=20)
        
        print(f"üìä HTTP Status: {response.status_code}")
        response_text = response.text.strip()
        print(f"üìÑ Response: {response_text[:300]}...")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞
        if response_text.startswith('<!DOCTYPE html>'):
            print("‚ùå –ü–æ–ª—É—á–µ–Ω HTML - –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É")
            analyze_html_error(response_text)
            return False
        
        try:
            json_response = json.loads(response_text)
            if json_response.get("ok") == True:
                print("‚úÖ –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É —É—Å–ø–µ—à–Ω–∞!")
                print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã: {json_response.get('data', 'N/A')}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {json_response.get('error', 'Unknown')}")
                return False
        except json.JSONDecodeError:
            if response_text == "OK":
                print("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç 'OK' - –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–∞!")
                return True
            else:
                print(f"‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {response_text}")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def step6_test_multiple_requests():
    """–®–∞–≥ 6: –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print("\nüîç –®–ê–ì 6: –¢–ï–°–¢ –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –ó–ê–ü–†–û–°–û–í")
    print("=" * 50)
    
    webhook_url = os.getenv("SHEETS_WEBHOOK_URL")
    token = os.getenv("SHEETS_TOKEN")
    
    success_count = 0
    test_count = 3
    
    for i in range(test_count):
        print(f"\nüì§ –ó–∞–ø—Ä–æ—Å {i+1}/{test_count}...")
        
        payload = {
            "date": "2025-06-12",
            "ticker": f"TEST_{i+1}",
            "figi": f"TEST_FIGI_{i+1}",
            "side": "BUY" if i % 2 == 0 else "SELL",
            "price": str(100.0 + i),
            "qty": "1",
            "fees": "0.1",
            "token": token
        }
        
        try:
            response = requests.post(webhook_url, data=payload, timeout=15)
            
            if response.status_code == 200 and not response.text.startswith('<!DOCTYPE html>'):
                print(f"‚úÖ –ó–∞–ø—Ä–æ—Å {i+1} —É—Å–ø–µ—à–µ–Ω")
                success_count += 1
            else:
                print(f"‚ùå –ó–∞–ø—Ä–æ—Å {i+1} –Ω–µ—É–¥–∞—á–µ–Ω: {response.text[:100]}...")
                
        except Exception as e:
            print(f"‚ùå –ó–∞–ø—Ä–æ—Å {i+1} –æ—à–∏–±–∫–∞: {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{test_count} –∑–∞–ø—Ä–æ—Å–æ–≤ —É—Å–ø–µ—à–Ω—ã")
    return success_count == test_count

def analyze_html_error(html_text):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç HTML –æ—à–∏–±–∫—É –æ—Ç Google Apps Script"""
    print("\nüîç –ê–ù–ê–õ–ò–ó HTML –û–®–ò–ë–ö–ò:")
    print("-" * 30)
    
    # –ò—â–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
    if 'TypeError:' in html_text:
        start = html_text.find('TypeError:')
        end = html_text.find('</div>', start)
        if end == -1:
            end = html_text.find('(line', start)
        if end != -1:
            error_text = html_text[start:end].strip()
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML entities
            error_text = error_text.replace('&#39;', "'").replace('&quot;', '"').replace('&amp;', '&')
            print(f"üö® –û—à–∏–±–∫–∞: {error_text}")
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if 'openById' in html_text:
        print("\nüí° –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID —Ç–∞–±–ª–∏—Ü—ã Google Sheets")
        print("üîß –†–ï–®–ï–ù–ò–ï:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à—É Google Sheets —Ç–∞–±–ª–∏—Ü—É")
        print("2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –∏–∑ URL: docs.google.com/spreadsheets/d/ID_–ó–î–ï–°–¨/edit")
        print("3. –ó–∞–º–µ–Ω–∏—Ç–µ SPREADSHEET_ID –≤ Google Apps Script –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID")
        
    elif 'appendRow' in html_text:
        print("\nüí° –ü–†–û–ë–õ–ï–ú–ê: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–∏—Å—Ç")
        print("üîß –†–ï–®–ï–ù–ò–ï:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –ª–∏—Å—Ç–∞ (Sheet1, –õ–∏—Å—Ç1)")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ª–∏—Å—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —Å–∫—Ä–∏–ø—Ç–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ")
        
    elif 'getActiveSheet' in html_text:
        print("\nüí° –ü–†–û–ë–õ–ï–ú–ê: –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—Å—Ç—É")
        print("üîß –†–ï–®–ï–ù–ò–ï:")
        print("1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ getSheetByName('Sheet1') –≤–º–µ—Å—Ç–æ getActiveSheet()")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ª–∏—Å—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def show_troubleshooting_guide():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –Ω–µ–ø–æ–ª–∞–¥–æ–∫"""
    print("\n" + "=" * 60)
    print("üõ†Ô∏è  –†–£–ö–û–í–û–î–°–¢–í–û –ü–û –£–°–¢–†–ê–ù–ï–ù–ò–Æ –ù–ï–ü–û–õ–ê–î–û–ö")
    print("=" * 60)
    
    print("\nüìã –ß–ê–°–¢–´–ï –ü–†–û–ë–õ–ï–ú–´ –ò –†–ï–®–ï–ù–ò–Ø:")
    print("-" * 40)
    
    problems = [
        {
            "problem": "TypeError: Cannot read properties of null (reading 'appendRow')",
            "solutions": [
                "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID —Ç–∞–±–ª–∏—Ü—ã Google Sheets",
                "–ó–∞–º–µ–Ω–∏—Ç–µ SPREADSHEET_ID –≤ —Å–∫—Ä–∏–ø—Ç–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π",
                "ID –±–µ—Ä–µ—Ç—Å—è –∏–∑ URL —Ç–∞–±–ª–∏—Ü—ã: docs.google.com/spreadsheets/d/ID_–ó–î–ï–°–¨/edit"
            ]
        },
        {
            "problem": "HTML –æ—Ç–≤–µ—Ç –≤–º–µ—Å—Ç–æ JSON",
            "solutions": [
                "–û—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ Google Apps Script",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å JavaScript –≤ —Å–∫—Ä–∏–ø—Ç–µ",
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∫–∞–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
            ]
        },
        {
            "problem": "–¢–∞–π–º–∞—É—Ç –∏–ª–∏ —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏",
            "solutions": [
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ URL —Å–∫—Ä–∏–ø—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π",
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç"
            ]
        }
    ]
    
    for i, item in enumerate(problems, 1):
        print(f"\n{i}. üö® {item['problem']}")
        for solution in item['solutions']:
            print(f"   ‚Ä¢ {solution}")
    
    print(f"\nüìö –ü–û–õ–ï–ó–ù–´–ï –°–°–´–õ–ö–ò:")
    print("‚Ä¢ Google Apps Script: https://script.google.com")
    print("‚Ä¢ Google Sheets: https://sheets.google.com")
    print("‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://developers.google.com/apps-script")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üîç –ü–û–®–ê–ì–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê GOOGLE SHEETS")
    print("=" * 60)
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ")
    print("–¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Ç–æ—á–Ω–æ–π –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã.\n")
    
    tests = [
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", step1_check_environment),
        ("–°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", step2_test_network_connection),
        ("–ü—Ä–æ—Å—Ç–æ–π POST –∑–∞–ø—Ä–æ—Å", step3_test_simple_post),
        ("Ping endpoint", step4_test_ping_endpoint),
        ("–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö", step5_test_data_write),
        ("–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã", step6_test_multiple_requests)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
            
            if not result:
                print(f"\n‚ö†Ô∏è  –¢–µ—Å—Ç '{test_name}' –Ω–µ –ø—Ä–æ—à–µ–ª. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.")
                break
                
        except Exception as e:
            print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
            break
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "=" * 60)
    print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
    print("=" * 60)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        print(f"‚Ä¢ {test_name}: {status}")
    
    all_passed = all(result for _, result in results)
    
    if all_passed:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print(f"\n‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´!")
        show_troubleshooting_guide()

if __name__ == "__main__":
    main()
