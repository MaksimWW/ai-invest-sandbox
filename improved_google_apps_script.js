
function doPost(e) {
  try {
    // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    console.log('=== NEW REQUEST ===');
    console.log('Timestamp:', new Date().toISOString());
    console.log('Request parameters:', e.parameter);
    console.log('Content length:', e.postData ? e.postData.length : 'No postData');
    
    const data = e.parameter;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    const expectedToken = "mySecret123"; // –í–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω
    if (data.token !== expectedToken) {
      console.log('‚ùå Unauthorized access attempt with token:', data.token);
      return createJsonResponse({
        ok: false, 
        error: "Unauthorized - invalid token"
      });
    }
    
    console.log('‚úÖ Token verified successfully');
    
    // –ï—Å–ª–∏ —ç—Ç–æ ping —Ç–µ—Å—Ç
    if (data.test === "ping") {
      console.log('üì° Ping test request received');
      return createJsonResponse({
        ok: true, 
        message: "Webhook is working perfectly",
        timestamp: new Date().toISOString(),
        script_version: "1.2"
      });
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
    if (data.test === "hello") {
      console.log('üëã Hello test request received');
      return createJsonResponse({
        ok: true, 
        message: "Hello from Google Apps Script",
        received_data: data
      });
    }
    
    // –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã Google Sheets
    // ID –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ URL: https://docs.google.com/spreadsheets/d/SPREADSHEET_ID/edit
    const SPREADSHEET_ID = "12kdk6h4cEs7q31ZjoUMvpAIhF3OC384XRRg6LtZKVdo"; // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® ID!
    
    console.log('üìä Opening spreadsheet with ID:', SPREADSHEET_ID);
    
    let spreadsheet;
    try {
      spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
      console.log('‚úÖ Spreadsheet opened successfully');
    } catch (error) {
      console.log('‚ùå Failed to open spreadsheet:', error.toString());
      return createJsonResponse({
        ok: false, 
        error: "Failed to open spreadsheet. Check SPREADSHEET_ID: " + error.toString()
      });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç
    let sheet;
    try {
      sheet = spreadsheet.getActiveSheet();
      if (!sheet) {
        sheet = spreadsheet.getSheetByName('Sheet1');
      }
      if (!sheet) {
        sheet = spreadsheet.insertSheet('Sheet1');
        console.log('üìÑ Created new sheet: Sheet1');
      }
      console.log('‚úÖ Sheet accessed:', sheet.getName());
    } catch (error) {
      console.log('‚ùå Failed to access sheet:', error.toString());
      return createJsonResponse({
        ok: false, 
        error: "Failed to access sheet: " + error.toString()
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    try {
      const firstRow = sheet.getRange(1, 1, 1, 8).getValues()[0];
      if (!firstRow[0] || firstRow[0] === '') {
        const headers = ['Date', 'Ticker', 'FIGI', 'Side', 'Price', 'Qty', 'Fees', 'Timestamp'];
        sheet.getRange(1, 1, 1, 8).setValues([headers]);
        console.log('‚úÖ Headers added to sheet');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Warning: Could not check/add headers:', error.toString());
    }
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
    const rowData = [
      data.date || new Date().toISOString().split('T')[0],
      data.ticker || "",
      data.figi || "",
      data.side || "",
      parseFloat(data.price) || 0,
      parseInt(data.qty) || 0,
      parseFloat(data.fees) || 0,
      new Date().toISOString() // timestamp –∑–∞–ø–∏—Å–∏
    ];
    
    console.log('üìù Prepared row data:', rowData);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    try {
      sheet.appendRow(rowData);
      console.log('‚úÖ Row appended successfully');
    } catch (error) {
      console.log('‚ùå Failed to append row:', error.toString());
      return createJsonResponse({
        ok: false, 
        error: "Failed to write to sheet: " + error.toString()
      });
    }
    
    // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    const response = {
      ok: true, 
      message: "Trade logged successfully",
      data: rowData,
      spreadsheet_id: SPREADSHEET_ID,
      sheet_name: sheet.getName(),
      timestamp: new Date().toISOString()
    };
    
    console.log('‚úÖ Success response:', response);
    return createJsonResponse(response);
      
  } catch (error) {
    console.log('‚ùå Critical error in doPost:', error.toString());
    console.log('Error stack:', error.stack);
    
    return createJsonResponse({
      ok: false,
      error: "Critical error: " + error.toString(),
      stack: error.stack
    });
  }
}

function createJsonResponse(data) {
  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON –æ—Ç–≤–µ—Ç
   */
  return ContentService
    .createTextOutput(JSON.stringify(data, null, 2))
    .setMimeType(ContentService.MimeType.JSON)
    .setHeaders({
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type'
    });
}

function doGet(e) {
  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ GET –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  console.log('GET request received:', e.parameter);
  
  return createJsonResponse({
    ok: true,
    message: "Google Apps Script is working",
    method: "GET",
    timestamp: new Date().toISOString(),
    parameters: e.parameter
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
function testScript() {
  console.log('=== MANUAL TEST ===');
  
  const testData = {
    parameter: {
      date: "2025-06-12",
      ticker: "MANUAL_TEST",
      figi: "MANUAL_FIGI",
      side: "BUY",
      price: "123.45",
      qty: "1",
      fees: "0.1",
      token: "mySecret123"
    }
  };
  
  const result = doPost(testData);
  console.log('Test result:', result.getContent());
}
