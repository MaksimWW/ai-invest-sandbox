
#!/usr/bin/env python
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Tinkoff Invest API
–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –∞–∫—Ü–∏–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
"""

import os
from tinkoff.invest import Client
from typing import Dict, Optional
import logging

logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TINKOFF_TOKEN = os.getenv("TINKOFF_SANDBOX_TOKEN")

# FIGI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
INSTRUMENTS = {
    "YNDX": "BBG004730N88",  # –Ø–Ω–¥–µ–∫—Å
    "FXIT": "BBG00Y91R9T3",  # Fix Price
    "GAZP": "BBG004730RP0",  # –ì–∞–∑–ø—Ä–æ–º
    "SBER": "BBG0047315Y7",  # –°–±–µ—Ä–±–∞–Ω–∫
}

# –û–±—Ä–∞—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏–º–∏ –º–æ–¥—É–ª—è–º–∏
FIGI_MAP = {
    "YNDX": "BBG004730N88",
    "FXIT": "BBG00Y91R9T3", 
    "GAZP": "BBG004730RP0",
    "SBER": "BBG0047315Y7",
    "LKOH": "BBG004730ZJ9",
    "NVDA": "BBG000BBJQV0",
    "AMD":  "BBG000BBQCY0",
}

def check_api_connection() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Tinkoff API"""
    if not TINKOFF_TOKEN:
        return False
    
    try:
        with Client(TINKOFF_TOKEN, app_name="ai-invest-bot") as client:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –æ–¥–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            test_figi = "BBG004730N88"  # YNDX
            response = client.market_data.get_last_prices(figi=[test_figi])
            return len(response.last_prices) > 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Tinkoff API: {e}")
        return False

def get_real_prices() -> Dict[str, float]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ Tinkoff API"""
    if not TINKOFF_TOKEN:
        logger.warning("TINKOFF_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return {}
    
    prices = {}
    
    try:
        with Client(TINKOFF_TOKEN, app_name="ai-invest-bot") as client:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            figis = list(INSTRUMENTS.values())
            response = client.market_data.get_last_prices(figi=figis)
            
            for last_price in response.last_prices:
                figi = last_price.figi
                price = last_price.price
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ —Ä—É–±–ª–∏
                price_rub = price.units + price.nano / 1_000_000_000
                
                # –ù–∞—Ö–æ–¥–∏–º —Ç–∏–∫–µ—Ä –ø–æ FIGI
                for ticker, instrument_figi in INSTRUMENTS.items():
                    if instrument_figi == figi:
                        prices[ticker] = price_rub
                        break
                        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã —Ü–µ–Ω—ã –¥–ª—è {len(prices)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        return prices
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω: {e}")
        return {}

def get_demo_prices() -> Dict[str, float]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–º–æ —Ü–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return {
        "YNDX": 2450.50,
        "FXIT": 1180.25,
        "GAZP": 180.20,
        "SBER": 250.15
    }

def get_prices_with_fallback() -> Dict[str, float]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—ã —Å fallback –Ω–∞ –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ"""
    if not TINKOFF_TOKEN:
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º DEMO —Ü–µ–Ω—ã - —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return get_demo_prices()
    
    real_prices = get_real_prices()
    
    if not real_prices:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º DEMO")
        return get_demo_prices()
    
    logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏–∑ Tinkoff API")
    return real_prices

def format_price_change(current_price: float, demo_mode: bool = False) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)"""
    if demo_mode:
        # –î–ª—è –¥–µ–º–æ —Ä–µ–∂–∏–º–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        import random
        change = random.uniform(-2.0, 2.0)
        if change > 0:
            return f"üìà (+{change:.1f}%)"
        else:
            return f"üìâ ({change:.1f}%)"
    else:
        # –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
        return "üìä"

if __name__ == "__main__":
    # –¢–µ—Å—Ç –º–æ–¥—É–ª—è
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Tinkoff API –º–æ–¥—É–ª—è")
    print("-" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if check_api_connection():
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API: OK")
    else:
        print("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API: FAILED")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω
    prices = get_prices_with_fallback()
    print(f"\nüìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã:")
    for ticker, price in prices.items():
        print(f"‚Ä¢ {ticker}: {price:.2f} ‚ÇΩ")
