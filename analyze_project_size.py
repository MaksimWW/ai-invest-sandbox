
#!/usr/bin/env python3
"""–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ - —á—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –º–µ—Å—Ç–∞"""

import os
import pathlib
from collections import defaultdict

def analyze_directory(path="."):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    
    # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
    by_extension = defaultdict(int)
    by_directory = defaultdict(int) 
    large_files = []
    
    total_size = 0
    
    for root, dirs, files in os.walk(path):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–ø–∫–∏
        dirs[:] = [d for d in dirs if not d.startswith('.git')]
        
        for file in files:
            file_path = os.path.join(root, file)
            try:
                size = os.path.getsize(file_path)
                total_size += size
                
                # –ü–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
                ext = pathlib.Path(file).suffix.lower()
                if not ext:
                    ext = "(no extension)"
                by_extension[ext] += size
                
                # –ü–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
                rel_root = os.path.relpath(root, path)
                if rel_root == ".":
                    rel_root = "(root)"
                by_directory[rel_root] += size
                
                # –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã (>1MB)
                if size > 1024 * 1024:
                    large_files.append((file_path, size))
                    
            except (OSError, IOError):
                continue
    
    return {
        'total_size': total_size,
        'by_extension': dict(by_extension),
        'by_directory': dict(by_directory),
        'large_files': large_files
    }

def format_size(bytes_size):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    for unit in ['B', 'KB', 'MB', 'GB']:
        if bytes_size < 1024.0:
            return f"{bytes_size:.1f} {unit}"
        bytes_size /= 1024.0
    return f"{bytes_size:.1f} TB"

def main():
    print("üîç –ê–ù–ê–õ–ò–ó –†–ê–ó–ú–ï–†–ê –ü–†–û–ï–ö–¢–ê")
    print("=" * 50)
    
    analysis = analyze_directory()
    
    print(f"\nüìä –û–ë–©–ò–ô –†–ê–ó–ú–ï–†: {format_size(analysis['total_size'])}")
    
    print(f"\nüóÇÔ∏è –¢–û–ü-10 –î–ò–†–ï–ö–¢–û–†–ò–ô –ü–û –†–ê–ó–ú–ï–†–£:")
    print("-" * 40)
    sorted_dirs = sorted(analysis['by_directory'].items(), key=lambda x: x[1], reverse=True)
    for dirname, size in sorted_dirs[:10]:
        print(f"  {dirname:<25} {format_size(size):>10}")
    
    print(f"\nüìÑ –¢–û–ü-10 –¢–ò–ü–û–í –§–ê–ô–õ–û–í –ü–û –†–ê–ó–ú–ï–†–£:")
    print("-" * 40)
    sorted_exts = sorted(analysis['by_extension'].items(), key=lambda x: x[1], reverse=True)
    for ext, size in sorted_exts[:10]:
        print(f"  {ext:<15} {format_size(size):>10}")
    
    print(f"\nüêò –ë–û–õ–¨–®–ò–ï –§–ê–ô–õ–´ (>1MB):")
    print("-" * 40)
    if analysis['large_files']:
        sorted_files = sorted(analysis['large_files'], key=lambda x: x[1], reverse=True)
        for filepath, size in sorted_files[:15]:
            print(f"  {filepath:<40} {format_size(size):>10}")
    else:
        print("  –ë–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—á–∏—Å—Ç–∫–µ
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ß–ò–°–¢–ö–ï:")
    print("-" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
    screenshot_size = analysis['by_extension'].get('.png', 0)
    if screenshot_size > 10 * 1024 * 1024:  # >10MB
        print(f"  ‚Ä¢ –£–¥–∞–ª–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–∑ attached_assets/ ({format_size(screenshot_size)})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏
    cache_indicators = ['.pyc', '.cache', '__pycache__']
    for indicator in cache_indicators:
        if indicator in analysis['by_directory'] or indicator in analysis['by_extension']:
            print(f"  ‚Ä¢ –û—á–∏—Å—Ç–∏—Ç—å Python –∫—ç—à–∏")
            break
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã
    binary_size = analysis['by_directory'].get('tools/keydb/bin', 0)
    if binary_size > 5 * 1024 * 1024:  # >5MB
        print(f"  ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É keydb —á–µ—Ä–µ–∑ –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤–º–µ—Å—Ç–æ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
    log_size = analysis['by_extension'].get('.log', 0)
    if log_size > 1024 * 1024:  # >1MB
        print(f"  ‚Ä¢ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥-—Ñ–∞–π–ª—ã ({format_size(log_size)})")

if __name__ == "__main__":
    main()
